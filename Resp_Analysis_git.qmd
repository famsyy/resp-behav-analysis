---
title: "Breathing and Cognition Analysis - Q4, 2023"
author: "Cameron Carson"
format: html
editor: visual
---

## Comments

-   The following analysis pipeline was coded to analyze reaction time and accuracy score data from an 2-back n-back task performed by younger (18-35 years older) and olderer (60+) healthy adults after completing different breathing protocols.
-   RAW reaction time/accuracy and questionnaire data for this analysis is not yet publicly available.
-   

## Import & Organize Data

```{r}
library(ggplot2)
library(dplyr)
library(tidyverse)
library(easystats)
library(interactions)
library(Rmisc)
library(jtools)
library(report)
library(tibble)

# Pick a Root Directory Below
root <- setwd("/DATA") # NEW 



# Pick Corresponding Wide Data Frame
summaryDF_wide <- read_csv("summaryDATA_wide.csv") # NEW Data (May-Aug, 2023)





final_df <- data.frame()

csv_files <- list.files(pattern = "*.csv", recursive = TRUE)

for (i in 1:length(csv_files)) {
  df <- read.csv(csv_files[i], header = TRUE, stringsAsFactors = FALSE) # Read in each CSV file
  df <- df[,c("participant", "thisCond", "key_resp.rt", "key_resp.corr", "Number.started", "trialBin", "trialOrder")] # Extract only the desired columns
  df <- df %>% 
    mutate(thisCond = recode(thisCond, "1" = "pre_spont", "2" = "post_spont", "3" = "pre_fast", "4" = "post_fast", "5" = "pre_slow", "6" = "post_slow")) # Recode values in thisCond column
  final_df <- rbind(final_df, df) # Append the data to the final dataframe
  final_df <- final_df[complete.cases(final_df),]
}
  
 


final_df <- final_df %>%
  mutate(group=
           ifelse(substr(participant, 1, 1) =="A", "olderer",
                  ifelse(substr(participant, 1, 1) == "R", "younger",
                  ifelse(substr(participant, 1, 2)== "RD", "younger", NA))))

####### ADDING COUNTERBALANCE TO MAIN DATAFRAME #######
final_df <- final_df %>%
mutate(counterbalance = case_when(
    substr(participant, 1, 1) == "A" ~ "C",  # IDs starting with 'A' go to group C
    substr(participant, 1, 1) == "R" & as.integer(substr(participant, 3, nchar(participant))) %% 2 == 1 ~ "A",  # Odd-numbered 'R' IDs go to group A
    substr(participant, 1, 1) == "R" & as.integer(substr(participant, 3, nchar(participant))) %% 2 == 0 ~ "B"  # Even-numbered 'R' IDs go to group B
  ))

##### ADDING COUNTERBALANCE TO WIDE DATAFRAME #####
summaryDF_wide <- summaryDF_wide %>%
mutate(counterbalance = case_when(
    substr(participant, 1, 1) == "A" ~ "C",  # IDs starting with 'A' go to group B
    substr(participant, 1, 1) == "R" & as.integer(substr(participant, 3, nchar(participant))) %% 2 == 1 ~ "A",  # Odd-numbered 'R' IDs go to group A
    substr(participant, 1, 1) == "R" & as.integer(substr(participant, 3, nchar(participant))) %% 2 == 0 ~ "B"  # Even-numbered 'R' IDs go to group B
  ))


# Separating Positive and Negative Directional Groups per Condition

summaryDF_wide <- summaryDF_wide %>%
  mutate(slowScore = ifelse(pre_slow_avg_rt > post_slow_avg_rt, "Down", "Up"),
         spontScore = ifelse(pre_spont_avg_rt > post_spont_avg_rt, "Down", "Up"),
         fastScore = ifelse(pre_fast_avg_rt > post_fast_avg_rt, "Down", "Up"))
  




```

## Cleaning Data

By changing the filter(n() \>= #) you can set different thresholders for "trials completed".

Thresholders:

**\>= 24** is **80%** Trials Completed Thresholder\
**\>= 21** is **70%** Trials Completed Thresholder\
**\>= 19** is **65%** Trials Completed Thresholder

**NOTE:** This only cleans the "raw data" - this does not affect or clean the *summaryRT_wide* data frame!!

```{r}
final_df <- subset(final_df, key_resp.rt >= 0) # Drop all negative response times
final_df <- subset(final_df, thisCond != "None") # Drop if the trial was not assigned a breathing condition

final_df_dropped <- final_df # Drop conditions that did not meet number of trials required



############################################################

#final_df_dropped$N <- paste(final_df_dropped$participant, final_df_dropped$thisCond)


#### Set Trials Completed Thresholder Below:
#final_df_dropped <- final_df_dropped %>%
 # group_by(N) %>%
 # filter(n() >= 21)%>%
 # ungroup()

 
#### Group the data by participant and thisCond and count occurrences
#df_counts <- final_df_dropped %>%
 # group_by(participant, thisCond) %>%
 # dplyr::count(name = "count")

#### Check for conditions occurring fewer than 21 times per participant
#participants_to_remove <- df_counts %>%
 # group_by(participant) %>%
  #filter(any(count < 21))

#### Remove participants with conditions occurring <21 times
#final_df_dropped <- final_df_dropped %>%
  #anti_join(participants_to_remove, by = "participant") %>%
  #ungroup()

############################################################

final_df_onlyCor <- subset(final_df_dropped, final_df_dropped$key_resp.corr == 1) # select only the correct responses


# Convert the column to numeric
final_df_onlyCor$key_resp.rt <- as.numeric(final_df_onlyCor$key_resp.rt)



# Summary Reaction Time
summaryRT <- summarySE(data = final_df_onlyCor, measurevar = "key_resp.rt", groupvars = c("group","thisCond", "participant", "counterbalance"))

# Summary Accuracy
summaryCorr <- summarySE(data = final_df_dropped, measurevar = "key_resp.corr", groupvars = c("group","thisCond", "participant", "counterbalance"))



#Combine Tables

summarySTATS <- left_join(summaryRT, summaryCorr, 
                          by =c("group", "thisCond", "participant","counterbalance"),
                          suffix =c("_RT", "_Acc"))


# Saving Tables
#write.csv(summaryRT, "/Users/home/Desktop/summaryRTWide.csv") # Save new version if added new data

#write.csv(summaryCorr, "/Users/home/Desktop/summaryCorrWide.csv") # Save new version if added new data
```

# REACTION TIME ANALYSIS {style="color: gray"}

## (RT) Hierarchical Shift Analysis 

```{r}

library(rogme)
library(tidybayes)

#Initial Plot showing RT distribution comparing Pre/Post Slow Conditions
rt_distribution_plot <- ggplot(final_df_onlyCor, aes(x = key_resp.rt)) + theme_classic() + 
  stat_density(aes(colour = thisCond), geom="line",position="identity", size=1) +
  scale_colour_viridis_d(end = 0.8) +
  coord_cartesian(xlim = c(0, 3)) +
  theme(axis.title.x = element_text(size = 18),
        axis.text.x = element_text(size = 16, colour="black"),
        axis.text.y = element_text(size = 16, colour="black"),
        axis.title.y = element_text(size = 18),
        legend.key.width = unit(1.5,"cm"),
        legend.position = c(0.55,0.75),
        legend.direction = "vertical",
        legend.text=element_text(size=16),
        legend.title=element_text(size=18),
        title = element_text(size=20)) +
  labs(x = "Reaction times", y = "Density", colour = "Conditions", guide_legend=FALSE) +
  ggtitle("Uniform shift")
rt_distribution_plot



#### Create Objects for n's for different groupings

# Includes both younger and olderer Adults
np <- final_df_onlyCor %>%
  distinct(participant) %>%
  n_distinct()

# Includes only olderer Adults
np_olderer <- final_df_onlyCor %>%
  filter(group == "olderer")%>%
  distinct(participant) %>%
  n_distinct()

# Includes only younger Adults
np_younger <- final_df_onlyCor %>%
  filter(group == "younger")%>%
  distinct(participant) %>%
  n_distinct()

# Includes only younger Adults in Counterbalance A
np_younger_A <- final_df_onlyCor %>%
  filter(counterbalance == "A")%>%
  distinct(participant) %>%
  n_distinct()

# Includes only younger Adults in Counterbalance B
np_younger_B <- final_df_onlyCor %>%
  filter(counterbalance == "B")%>%
  distinct(participant) %>%
  n_distinct()


#### Create new parent dataframes for HSF Condition Selections

# Spontaneous
conditions_to_exclude_spont <- c("pre_fast", "post_fast", "pre_slow", "post_slow")
hsf_spont <- subset(final_df_onlyCor, !thisCond %in% conditions_to_exclude_spont)

# Slow
conditions_to_exclude_slow <- c("pre_fast", "post_fast", "pre_spont", "post_spont")
hsf_slow <- subset(final_df_onlyCor, !thisCond %in% conditions_to_exclude_slow)

# Fast
conditions_to_exclude_fast <- c("pre_slow", "post_slow", "pre_spont", "post_spont")
hsf_fast <- subset(final_df_onlyCor, !thisCond %in% conditions_to_exclude_fast)








####################################################################################
### SPONTANEOUS CONDITION 
### younger & olderer Adults
####################################################################################

# Create Tibble
hsf_spont_tibble <- tibble(rt = hsf_spont$key_resp.rt,
             cond = factor(hsf_spont$thisCond),
             id = factor(hsf_spont$participant))

# Shift Function
out_spont_sf <- shifthd_pbci(hsf_spont_tibble, rt ~ cond, doall = TRUE, nboot = 200, adj_ci = TRUE) # Function

plot_spont_sf <- plot_sf(out_spont_sf, plot_theme = 1)[[1]] + 
     theme(axis.text = element_text(size = 16, colour="black"))+labs(title = "SF - younger & olderer Adults - Spont") # Plot
plot_spont_sf

# Hierarchical Shift Function
out_spont_hsf <- hsf(hsf_spont_tibble, rt ~ cond + id)

plot_spont_hsf <- plot_hsf(out_spont_hsf)+labs(title = "HSF - younger & olderer Adults - Spont")
plot_spont_hsf

# Percentile Boostrap Hierarchical Shift Function
set.seed(8899)
hsf_pb_spont <- hsf_pb(hsf_spont_tibble, rt ~ cond + id) # Boostrap Samples

# Plot Confidence Intervals
out_spont_hsf_ci <- plot_hsf_pb(hsf_pb_spont, interv = "ci") +labs(title = "HSF - younger & olderer Adults - Spont + CI")
out_spont_hsf_ci

# Plot Boostrap Distributions
set.seed(8899)
out_spont_hsf_boot <- plot_hsf_pb_dist(hsf_pb_spont)+labs(title = "Boostrap Difference Distributions - younger & olderer Adults - Spont")
out_spont_hsf_boot


# P Values
out_spont_hsf$pvalues


# Adjusted P Values
out_spont_hsf$adjusted_pvalues

# Stochastic Dominance

# Participants with all quantile differences > 0
nq_spont <- length(out_spont_hsf$quantiles)
pdmt0_spont <- apply(out_spont_hsf$individual_sf > 0, 2, sum)
print(paste0('In ',sum(pdmt0_spont == nq_spont),' participants (',round(100 * sum(pdmt0_spont == nq_spont) / np, digits = 1),'%), all quantile differences are more than to zero'))

# Participants with all quantile differences < 0
pdlt0_spont <- apply(out_spont_hsf$individual_sf < 0, 2, sum)
print(paste0('In ',sum(pdlt0_spont == nq_spont),' participants (',round(100 * sum(pdlt0_spont == nq_spont) / np, digits = 1),'%), all quantile differences are less than to zero'))




####################################################################################
### SPONTANEOUS CONDITION 
### olderer Adults
####################################################################################

# Filter DF to olderer Adults
hsf_spont_olderer <- hsf_spont %>% 
  dplyr::filter(group=="olderer")

# Create Tibble
hsf_spont_tibble_olderer <- tibble(rt = hsf_spont_olderer$key_resp.rt,
             cond = factor(hsf_spont_olderer$thisCond),
             id = factor(hsf_spont_olderer$participant))

# Shift Function
out_spont_sf_olderer <- shifthd_pbci(hsf_spont_tibble_olderer, rt ~ cond, doall = TRUE, nboot = 200, adj_ci = TRUE) # Function

plot_spont_sf_olderer <- plot_sf(out_spont_sf_olderer, plot_theme = 1)[[1]] + 
     theme(axis.text = element_text(size = 16, colour="black"))+labs(title = "SF - olderer Adults - Spont") # Plot
plot_spont_sf_olderer

# Hierarchical Shift Function
out_spont_hsf_olderer <- hsf(hsf_spont_tibble_olderer, rt ~ cond + id)

plot_spont_hsf_olderer <- plot_hsf(out_spont_hsf_olderer)+labs(title = "HSF - olderer Adults - Spont")
plot_spont_hsf_olderer


# Percentile Boostrap Hierarchical Shift Function
set.seed(8899)
hsf_pb_spont_olderer <- hsf_pb(hsf_spont_tibble_olderer, rt ~ cond + id) # Boostrap Samples

# Plot Confidence Intervals
out_spont_hsf_ci_olderer <- plot_hsf_pb(hsf_pb_spont_olderer, interv = "ci") +labs(title = "HSF - olderer Adults - Spont + CI")
out_spont_hsf_ci_olderer

# Plot Boostrap Distributions
set.seed(8899)
out_spont_hsf_boot_olderer <- plot_hsf_pb_dist(hsf_pb_spont_olderer)+labs(title = "Boostrap Difference Distributions - olderer Adults - Spont")
out_spont_hsf_boot_olderer


# P Values
out_spont_hsf_olderer$pvalues


# Adjusted P Values
out_spont_hsf_olderer$adjusted_pvalues

# Stochastic Dominance
# Participants with all quantile differences > 0
nq_spont_olderer <- length(out_spont_hsf_olderer$quantiles)
pdmt0_spont_olderer <- apply(out_spont_hsf_olderer$individual_sf > 0, 2, sum)
print(paste0('In ',sum(pdmt0_spont_olderer == nq_spont_olderer),' participants (',round(100 * sum(pdmt0_spont_olderer == nq_spont_olderer) / np_olderer, digits = 1),'%), all quantile differences are more than to zero'))

# Participants with all quantile differences < 0
pdlt0_spont_olderer <- apply(out_spont_hsf_olderer$individual_sf < 0, 2, sum)
print(paste0('In ',sum(pdlt0_spont_olderer == nq_spont_olderer),' participants (',round(100 * sum(pdlt0_spont_olderer == nq_spont_olderer) / np_olderer, digits = 1),'%), all quantile differences are less than to zero'))



####################################################################################
### SPONTANEOUS CONDITION 
### younger Adults
####################################################################################

# Filter DF to olderer Adults
hsf_spont_younger <- hsf_spont %>% 
  dplyr::filter(group=="younger")

# Create Tibble
hsf_spont_tibble_younger <- tibble(rt = hsf_spont_younger$key_resp.rt,
             cond = factor(hsf_spont_younger$thisCond),
             id = factor(hsf_spont_younger$participant))

# Shift Function
out_spont_sf_younger <- shifthd_pbci(hsf_spont_tibble_younger, rt ~ cond, doall = TRUE, nboot = 200, adj_ci = TRUE) # Function

plot_spont_sf_younger <- plot_sf(out_spont_sf_younger, plot_theme = 1)[[1]] + 
     theme(axis.text = element_text(size = 16, colour="black"))+labs(title = "SF - younger Adults - Spont") # Plot
plot_spont_sf_younger

# Hierarchical Shift Function
out_spont_hsf_younger <- hsf(hsf_spont_tibble_younger, rt ~ cond + id)

plot_spont_hsf_younger <- plot_hsf(out_spont_hsf_younger)+labs(title = "HSF - younger Adults - Spont")
plot_spont_hsf_younger


# Percentile Boostrap Hierarchical Shift Function
set.seed(8899)
hsf_pb_spont_younger <- hsf_pb(hsf_spont_tibble_younger, rt ~ cond + id) # Boostrap Samples

# Plot Confidence Intervals
out_spont_hsf_ci_younger <- plot_hsf_pb(hsf_pb_spont_younger, interv = "ci") +labs(title = "HSF - younger Adults - Spont + CI")
out_spont_hsf_ci_younger

# Plot Boostrap Distributions
set.seed(8899)
out_spont_hsf_boot_younger <- plot_hsf_pb_dist(hsf_pb_spont_younger)+labs(title = "Boostrap Difference Distributions - younger Adults - Spont")
out_spont_hsf_boot_younger


# P Values
out_spont_hsf_younger$pvalues


# Adjusted P Values
out_spont_hsf_younger$adjusted_pvalues

# Stochastic Dominance
# Participants with all quantile differences > 0
nq_spont_younger <- length(out_spont_hsf_younger$quantiles)
pdmt0_spont_younger <- apply(out_spont_hsf_younger$individual_sf > 0, 2, sum)
print(paste0('In ',sum(pdmt0_spont_younger == nq_spont_younger),' participants (',round(100 * sum(pdmt0_spont_younger == nq_spont_younger) / np_younger, digits = 1),'%), all quantile differences are more than to zero'))

# Participants with all quantile differences < 0
pdlt0_spont_younger <- apply(out_spont_hsf_younger$individual_sf < 0, 2, sum)
print(paste0('In ',sum(pdlt0_spont_younger == nq_spont_younger),' participants (',round(100 * sum(pdlt0_spont_younger == nq_spont_younger) / np_younger, digits = 1),'%), all quantile differences are less than to zero'))



####################################################################################
### SPONTANEOUS CONDITION 
### younger Adults - Counterbalance A
####################################################################################

# Filter DF to olderer Adults
hsf_spont_younger_A <- hsf_spont %>% 
  dplyr::filter(counterbalance=="A")

# Create Tibble
hsf_spont_tibble_younger_A <- tibble(rt = hsf_spont_younger_A$key_resp.rt,
             cond = factor(hsf_spont_younger_A$thisCond),
             id = factor(hsf_spont_younger_A$participant))

# Shift Function
out_spont_sf_younger_A <- shifthd_pbci(hsf_spont_tibble_younger_A, rt ~ cond, doall = TRUE, nboot = 200, adj_ci = TRUE) # Function

plot_spont_sf_younger_A <- plot_sf(out_spont_sf_younger_A, plot_theme = 1)[[1]] + 
     theme(axis.text = element_text(size = 16, colour="black"))+labs(title = "SF - younger Adults - A - Spont") # Plot
plot_spont_sf_younger_A

# Hierarchical Shift Function
out_spont_hsf_younger_A <- hsf(hsf_spont_tibble_younger_A, rt ~ cond + id)

plot_spont_hsf_younger_A <- plot_hsf(out_spont_hsf_younger_A)+labs(title = "HSF - younger Adults - A - Spont")
plot_spont_hsf_younger_A


# Percentile Boostrap Hierarchical Shift Function
set.seed(8899)
hsf_pb_spont_younger_A <- hsf_pb(hsf_spont_tibble_younger_A, rt ~ cond + id) # Boostrap Samples

# Plot Confidence Intervals
out_spont_hsf_ci_younger_A <- plot_hsf_pb(hsf_pb_spont_younger_A, interv = "ci") +labs(title = "HSF - younger Adults - A - Spont + CI")
out_spont_hsf_ci_younger_A

# Plot Boostrap Distributions
set.seed(8899)
out_spont_hsf_boot_younger_A <- plot_hsf_pb_dist(hsf_pb_spont_younger_A)+labs(title = "Boostrap Difference Distributions - younger Adults - A - Spont")
out_spont_hsf_boot_younger_A


# P Values
out_spont_hsf_younger_A$pvalues


# Adjusted P Values
out_spont_hsf_younger_A$adjusted_pvalues

# Stochastic Dominance
# Participants with all quantile differences > 0
nq_spont_younger_A <- length(out_spont_hsf_younger_A$quantiles)
pdmt0_spont_younger_A <- apply(out_spont_hsf_younger_A$individual_sf > 0, 2, sum)
print(paste0('In ',sum(pdmt0_spont_younger_A == nq_spont_younger_A),' participants (',round(100 * sum(pdmt0_spont_younger_A == nq_spont_younger_A) / np_younger_A, digits = 1),'%), all quantile differences are more than to zero'))

# Participants with all quantile differences < 0
pdlt0_spont_younger_A <- apply(out_spont_hsf_younger_A$individual_sf < 0, 2, sum)
print(paste0('In ',sum(pdlt0_spont_younger_A == nq_spont_younger_A),' participants (',round(100 * sum(pdlt0_spont_younger_A == nq_spont_younger_A) / np_younger_A, digits = 1),'%), all quantile differences are less than to zero'))


####################################################################################
### SPONTANEOUS CONDITION 
### younger Adults - Counterbalance B
####################################################################################

# Filter DF to olderer Adults
hsf_spont_younger_B <- hsf_spont %>% 
  dplyr::filter(counterbalance=="B")

# Create Tibble
hsf_spont_tibble_younger_B <- tibble(rt = hsf_spont_younger_B$key_resp.rt,
             cond = factor(hsf_spont_younger_B$thisCond),
             id = factor(hsf_spont_younger_B$participant))

# Shift Function
out_spont_sf_younger_B <- shifthd_pbci(hsf_spont_tibble_younger_B, rt ~ cond, doall = TRUE, nboot = 200, adj_ci = TRUE) # Function

plot_spont_sf_younger_B <- plot_sf(out_spont_sf_younger_B, plot_theme = 1)[[1]] + 
     theme(axis.text = element_text(size = 16, colour="black"))+labs(title = "SF - younger Adults - B - Spont") # Plot
plot_spont_sf_younger_B

# Hierarchical Shift Function
out_spont_hsf_younger_B <- hsf(hsf_spont_tibble_younger_B, rt ~ cond + id)

plot_spont_hsf_younger_B <- plot_hsf(out_spont_hsf_younger_B)+labs(title = "HSF - younger Adults - B - Spont")
plot_spont_hsf_younger_B


# Percentile Boostrap Hierarchical Shift Function
set.seed(8899)
hsf_pb_spont_younger_B <- hsf_pb(hsf_spont_tibble_younger_B, rt ~ cond + id) # Boostrap Samples

# Plot Confidence Intervals
out_spont_hsf_ci_younger_B <- plot_hsf_pb(hsf_pb_spont_younger_B, interv = "ci") +labs(title = "HSF - younger Adults - B - Spont + CI")
out_spont_hsf_ci_younger_B

# Plot Boostrap Distributions
set.seed(8899)
out_spont_hsf_boot_younger_B <- plot_hsf_pb_dist(hsf_pb_spont_younger_B)+labs(title = "Boostrap Difference Distributions - younger Adults - B - Spont")
out_spont_hsf_boot_younger_B


# P Values
out_spont_hsf_younger_B$pvalues


# Adjusted P Values
out_spont_hsf_younger_B$adjusted_pvalues

# Stochastic Dominance
# Participants with all quantile differences > 0
nq_spont_younger_B <- length(out_spont_hsf_younger_B$quantiles)
pdmt0_spont_younger_B <- apply(out_spont_hsf_younger_B$individual_sf > 0, 2, sum)
print(paste0('In ',sum(pdmt0_spont_younger_B == nq_spont_younger_B),' participants (',round(100 * sum(pdmt0_spont_younger_B == nq_spont_younger_B) / np_younger_B, digits = 1),'%), all quantile differences are more than to zero'))

# Participants with all quantile differences < 0
pdlt0_spont_younger_B <- apply(out_spont_hsf_younger_B$individual_sf < 0, 2, sum)
print(paste0('In ',sum(pdlt0_spont_younger_B == nq_spont_younger_B),' participants (',round(100 * sum(pdlt0_spont_younger_B == nq_spont_younger_B) / np_younger_B, digits = 1),'%), all quantile differences are less than to zero'))



################################################################################################################################################################################################################################################################################################################################################
########################################################################################################################################################################





####################################################################################
### SLOW CONDITION 
### younger & olderer Adults
####################################################################################

# Create Tibble
hsf_slow_tibble <- tibble(rt = hsf_slow$key_resp.rt,
             cond = factor(hsf_slow$thisCond),
             id = factor(hsf_slow$participant))

# Shift Function
out_slow_sf <- shifthd_pbci(hsf_slow_tibble, rt ~ cond, doall = TRUE, nboot = 200, adj_ci = TRUE) # Function

plot_slow_sf <- plot_sf(out_slow_sf, plot_theme = 1)[[1]] + 
     theme(axis.text = element_text(size = 16, colour="black"))+labs(title = "SF - younger & olderer Adults - Slow") # Plot
plot_slow_sf

# Hierarchical Shift Function
out_slow_hsf <- hsf(hsf_slow_tibble, rt ~ cond + id)

plot_slow_hsf <- plot_hsf(out_slow_hsf)+labs(title = "HSF - younger & olderer Adults - Slow")
plot_slow_hsf

# Percentile Boostrap Hierarchical Shift Function
set.seed(8899)
hsf_pb_slow <- hsf_pb(hsf_slow_tibble, rt ~ cond + id) # Boostrap Samples

# Plot Confidence Intervals
out_slow_hsf_ci <- plot_hsf_pb(hsf_pb_slow, interv = "ci") +labs(title = "HSF - younger & olderer Adults - Slow + CI")
out_slow_hsf_ci

# Plot Boostrap Distributions
set.seed(8899)
out_slow_hsf_boot <- plot_hsf_pb_dist(hsf_pb_slow)+labs(title = "Boostrap Difference Distributions - younger & olderer Adults - Slow")
out_slow_hsf_boot


# P Values
out_slow_hsf$pvalues


# Adjusted P Values
out_slow_hsf$adjusted_pvalues

# Stochastic Dominance

# Participants with all quantile differences > 0
nq_slow <- length(out_slow_hsf$quantiles)
pdmt0_slow <- apply(out_slow_hsf$individual_sf > 0, 2, sum)
print(paste0('In ',sum(pdmt0_slow == nq_slow),' participants (',round(100 * sum(pdmt0_slow == nq_slow) / np, digits = 1),'%), all quantile differences are more than to zero'))

# Participants with all quantile differences < 0
pdlt0_slow <- apply(out_slow_hsf$individual_sf < 0, 2, sum)
print(paste0('In ',sum(pdlt0_slow == nq_slow),' participants (',round(100 * sum(pdlt0_slow == nq_slow) / np, digits = 1),'%), all quantile differences are less than to zero'))




####################################################################################
### SLOW CONDITION 
### olderer Adults
####################################################################################

# Filter DF to olderer Adults
hsf_slow_olderer <- hsf_slow %>% 
  dplyr::filter(group=="olderer")

# Create Tibble
hsf_slow_tibble_olderer <- tibble(rt = hsf_slow_olderer$key_resp.rt,
             cond = factor(hsf_slow_olderer$thisCond),
             id = factor(hsf_slow_olderer$participant))

# Shift Function
out_slow_sf_olderer <- shifthd_pbci(hsf_slow_tibble_olderer, rt ~ cond, doall = TRUE, nboot = 200, adj_ci = TRUE) # Function

plot_slow_sf_olderer <- plot_sf(out_slow_sf_olderer, plot_theme = 1)[[1]] + 
     theme(axis.text = element_text(size = 16, colour="black"))+labs(title = "SF - olderer Adults - Slow") # Plot
plot_slow_sf_olderer

# Hierarchical Shift Function
out_slow_hsf_olderer <- hsf(hsf_slow_tibble_olderer, rt ~ cond + id)

plot_slow_hsf_olderer <- plot_hsf(out_slow_hsf_olderer)+labs(title = "HSF - olderer Adults - Slow")
plot_slow_hsf_olderer


# Percentile Boostrap Hierarchical Shift Function
set.seed(8899)
hsf_pb_slow_olderer <- hsf_pb(hsf_slow_tibble_olderer, rt ~ cond + id) # Boostrap Samples

# Plot Confidence Intervals
out_slow_hsf_ci_olderer <- plot_hsf_pb(hsf_pb_slow_olderer, interv = "ci") +labs(title = "HSF - olderer Adults - Slow + CI")
out_slow_hsf_ci_olderer

# Plot Boostrap Distributions
set.seed(8899)
out_slow_hsf_boot_olderer <- plot_hsf_pb_dist(hsf_pb_slow_olderer)+labs(title = "Boostrap Difference Distributions - olderer Adults - Slow")
out_slow_hsf_boot_olderer


# P Values
out_slow_hsf_olderer$pvalues


# Adjusted P Values
out_slow_hsf_olderer$adjusted_pvalues

# Stochastic Dominance
# Participants with all quantile differences > 0
nq_slow_olderer <- length(out_slow_hsf_olderer$quantiles)
pdmt0_slow_olderer <- apply(out_slow_hsf_olderer$individual_sf > 0, 2, sum)
print(paste0('In ',sum(pdmt0_slow_olderer == nq_slow_olderer),' participants (',round(100 * sum(pdmt0_slow_olderer == nq_slow_olderer) / np_olderer, digits = 1),'%), all quantile differences are more than to zero'))

# Participants with all quantile differences < 0
pdlt0_slow_olderer <- apply(out_slow_hsf_olderer$individual_sf < 0, 2, sum)
print(paste0('In ',sum(pdlt0_slow_olderer == nq_slow_olderer),' participants (',round(100 * sum(pdlt0_slow_olderer == nq_slow_olderer) / np_olderer, digits = 1),'%), all quantile differences are less than to zero'))



####################################################################################
### SLOW CONDITION 
### younger Adults
####################################################################################

# Filter DF to olderer Adults
hsf_slow_younger <- hsf_slow %>% 
  dplyr::filter(group=="younger")

# Create Tibble
hsf_slow_tibble_younger <- tibble(rt = hsf_slow_younger$key_resp.rt,
             cond = factor(hsf_slow_younger$thisCond),
             id = factor(hsf_slow_younger$participant))

# Shift Function
out_slow_sf_younger <- shifthd_pbci(hsf_slow_tibble_younger, rt ~ cond, doall = TRUE, nboot = 200, adj_ci = TRUE) # Function

plot_slow_sf_younger <- plot_sf(out_slow_sf_younger, plot_theme = 1)[[1]] + 
     theme(axis.text = element_text(size = 16, colour="black"))+labs(title = "SF - younger Adults - Slow") # Plot
plot_slow_sf_younger

# Hierarchical Shift Function
out_slow_hsf_younger <- hsf(hsf_slow_tibble_younger, rt ~ cond + id)

plot_slow_hsf_younger <- plot_hsf(out_slow_hsf_younger)+labs(title = "HSF - younger Adults - Slow")
plot_slow_hsf_younger


# Percentile Boostrap Hierarchical Shift Function
set.seed(8899)
hsf_pb_slow_younger <- hsf_pb(hsf_slow_tibble_younger, rt ~ cond + id) # Boostrap Samples

# Plot Confidence Intervals
out_slow_hsf_ci_younger <- plot_hsf_pb(hsf_pb_slow_younger, interv = "ci") +labs(title = "HSF - younger Adults - Slow + CI")
out_slow_hsf_ci_younger

# Plot Boostrap Distributions
set.seed(8899)
out_slow_hsf_boot_younger <- plot_hsf_pb_dist(hsf_pb_slow_younger)+labs(title = "Boostrap Difference Distributions - younger Adults - Slow")
out_slow_hsf_boot_younger


# P Values
out_slow_hsf_younger$pvalues


# Adjusted P Values
out_slow_hsf_younger$adjusted_pvalues

# Stochastic Dominance
# Participants with all quantile differences > 0
nq_slow_younger <- length(out_slow_hsf_younger$quantiles)
pdmt0_slow_younger <- apply(out_slow_hsf_younger$individual_sf > 0, 2, sum)
print(paste0('In ',sum(pdmt0_slow_younger == nq_slow_younger),' participants (',round(100 * sum(pdmt0_slow_younger == nq_slow_younger) / np_younger, digits = 1),'%), all quantile differences are more than to zero'))

# Participants with all quantile differences < 0
pdlt0_slow_younger <- apply(out_slow_hsf_younger$individual_sf < 0, 2, sum)
print(paste0('In ',sum(pdlt0_slow_younger == nq_slow_younger),' participants (',round(100 * sum(pdlt0_slow_younger == nq_slow_younger) / np_younger, digits = 1),'%), all quantile differences are less than to zero'))



####################################################################################
### SLOW CONDITION 
### younger Adults - Counterbalance A
####################################################################################

# Filter DF to olderer Adults
hsf_slow_younger_A <- hsf_slow %>% 
  dplyr::filter(counterbalance=="A")

# Create Tibble
hsf_slow_tibble_younger_A <- tibble(rt = hsf_slow_younger_A$key_resp.rt,
             cond = factor(hsf_slow_younger_A$thisCond),
             id = factor(hsf_slow_younger_A$participant))

# Shift Function
out_slow_sf_younger_A <- shifthd_pbci(hsf_slow_tibble_younger_A, rt ~ cond, doall = TRUE, nboot = 200, adj_ci = TRUE) # Function

plot_slow_sf_younger_A <- plot_sf(out_slow_sf_younger_A, plot_theme = 1)[[1]] + 
     theme(axis.text = element_text(size = 16, colour="black"))+labs(title = "SF - younger Adults - A - Slow") # Plot
plot_slow_sf_younger_A

# Hierarchical Shift Function
out_slow_hsf_younger_A <- hsf(hsf_slow_tibble_younger_A, rt ~ cond + id)

plot_slow_hsf_younger_A <- plot_hsf(out_slow_hsf_younger_A)+labs(title = "HSF - younger Adults - A - Slow")
plot_slow_hsf_younger_A


# Percentile Boostrap Hierarchical Shift Function
set.seed(8899)
hsf_pb_slow_younger_A <- hsf_pb(hsf_slow_tibble_younger_A, rt ~ cond + id) # Boostrap Samples

# Plot Confidence Intervals
out_slow_hsf_ci_younger_A <- plot_hsf_pb(hsf_pb_slow_younger_A, interv = "ci") +labs(title = "HSF - younger Adults - A - Slow + CI")
out_slow_hsf_ci_younger_A

# Plot Boostrap Distributions
set.seed(8899)
out_slow_hsf_boot_younger_A <- plot_hsf_pb_dist(hsf_pb_slow_younger_A)+labs(title = "Boostrap Difference Distributions - younger Adults - A - Slow")
out_slow_hsf_boot_younger_A


# P Values
out_slow_hsf_younger_A$pvalues


# Adjusted P Values
out_slow_hsf_younger_A$adjusted_pvalues

# Stochastic Dominance
# Participants with all quantile differences > 0
nq_slow_younger_A <- length(out_slow_hsf_younger_A$quantiles)
pdmt0_slow_younger_A <- apply(out_slow_hsf_younger_A$individual_sf > 0, 2, sum)
print(paste0('In ',sum(pdmt0_slow_younger_A == nq_slow_younger_A),' participants (',round(100 * sum(pdmt0_slow_younger_A == nq_slow_younger_A) / np_younger_A, digits = 1),'%), all quantile differences are more than to zero'))

# Participants with all quantile differences < 0
pdlt0_slow_younger_A <- apply(out_slow_hsf_younger_A$individual_sf < 0, 2, sum)
print(paste0('In ',sum(pdlt0_slow_younger_A == nq_slow_younger_A),' participants (',round(100 * sum(pdlt0_slow_younger_A == nq_slow_younger_A) / np_younger_A, digits = 1),'%), all quantile differences are less than to zero'))


####################################################################################
### SLOW CONDITION 
### younger Adults - Counterbalance B
####################################################################################

# Filter DF to olderer Adults
hsf_slow_younger_B <- hsf_slow %>% 
  dplyr::filter(counterbalance=="B")

# Create Tibble
hsf_slow_tibble_younger_B <- tibble(rt = hsf_slow_younger_B$key_resp.rt,
             cond = factor(hsf_slow_younger_B$thisCond),
             id = factor(hsf_slow_younger_B$participant))

# Shift Function
out_slow_sf_younger_B <- shifthd_pbci(hsf_slow_tibble_younger_B, rt ~ cond, doall = TRUE, nboot = 200, adj_ci = TRUE) # Function

plot_slow_sf_younger_B <- plot_sf(out_slow_sf_younger_B, plot_theme = 1)[[1]] + 
     theme(axis.text = element_text(size = 16, colour="black"))+labs(title = "SF - younger Adults - B - Slow") # Plot
plot_slow_sf_younger_B

# Hierarchical Shift Function
out_slow_hsf_younger_B <- hsf(hsf_slow_tibble_younger_B, rt ~ cond + id)

plot_slow_hsf_younger_B <- plot_hsf(out_slow_hsf_younger_B)+labs(title = "HSF - younger Adults - B - Slow")
plot_slow_hsf_younger_B


# Percentile Boostrap Hierarchical Shift Function
set.seed(8899)
hsf_pb_slow_younger_B <- hsf_pb(hsf_slow_tibble_younger_B, rt ~ cond + id) # Boostrap Samples

# Plot Confidence Intervals
out_slow_hsf_ci_younger_B <- plot_hsf_pb(hsf_pb_slow_younger_B, interv = "ci") +labs(title = "HSF - younger Adults - B - Slow + CI")
out_slow_hsf_ci_younger_B

# Plot Boostrap Distributions
set.seed(8899)
out_slow_hsf_boot_younger_B <- plot_hsf_pb_dist(hsf_pb_slow_younger_B)+labs(title = "Boostrap Difference Distributions - younger Adults - B - Slow")
out_slow_hsf_boot_younger_B


# P Values
out_slow_hsf_younger_B$pvalues


# Adjusted P Values
out_slow_hsf_younger_B$adjusted_pvalues

# Stochastic Dominance
# Participants with all quantile differences > 0
nq_slow_younger_B <- length(out_slow_hsf_younger_B$quantiles)
pdmt0_slow_younger_B <- apply(out_slow_hsf_younger_B$individual_sf > 0, 2, sum)
print(paste0('In ',sum(pdmt0_slow_younger_B == nq_slow_younger_B),' participants (',round(100 * sum(pdmt0_slow_younger_B == nq_slow_younger_B) / np_younger_B, digits = 1),'%), all quantile differences are more than to zero'))

# Participants with all quantile differences < 0
pdlt0_slow_younger_B <- apply(out_slow_hsf_younger_B$individual_sf < 0, 2, sum)
print(paste0('In ',sum(pdlt0_slow_younger_B == nq_slow_younger_B),' participants (',round(100 * sum(pdlt0_slow_younger_B == nq_slow_younger_B) / np_younger_B, digits = 1),'%), all quantile differences are less than to zero'))


################################################################################################################################################################################################################################################################################################################################################
########################################################################################################################################################################




####################################################################################
### FAST CONDITION 
### younger Adults
####################################################################################

# Filter DF to olderer Adults
hsf_fast_younger <- hsf_fast %>% 
  dplyr::filter(group=="younger")

# Create Tibble
hsf_fast_tibble_younger <- tibble(rt = hsf_fast_younger$key_resp.rt,
             cond = factor(hsf_fast_younger$thisCond),
             id = factor(hsf_fast_younger$participant))

# Shift Function
out_fast_sf_younger <- shifthd_pbci(hsf_fast_tibble_younger, rt ~ cond, doall = TRUE, nboot = 200, adj_ci = TRUE) # Function

plot_fast_sf_younger <- plot_sf(out_fast_sf_younger, plot_theme = 1)[[1]] + 
     theme(axis.text = element_text(size = 16, colour="black"))+labs(title = "SF - younger Adults - Fast") # Plot
plot_fast_sf_younger

# Hierarchical Shift Function
out_fast_hsf_younger <- hsf(hsf_fast_tibble_younger, rt ~ cond + id)

plot_fast_hsf_younger <- plot_hsf(out_fast_hsf_younger)+labs(title = "HSF - younger Adults - Fast")
plot_fast_hsf_younger


# Percentile Boostrap Hierarchical Shift Function
set.seed(8899)
hsf_pb_fast_younger <- hsf_pb(hsf_fast_tibble_younger, rt ~ cond + id) # Boostrap Samples

# Plot Confidence Intervals
out_fast_hsf_ci_younger <- plot_hsf_pb(hsf_pb_fast_younger, interv = "ci") +labs(title = "HSF - younger Adults - Fast + CI")
out_fast_hsf_ci_younger

# Plot Boostrap Distributions
set.seed(8899)
out_fast_hsf_boot_younger <- plot_hsf_pb_dist(hsf_pb_fast_younger)+labs(title = "Boostrap Difference Distributions - younger Adults - Fast")
out_fast_hsf_boot_younger


# P Values
out_fast_hsf_younger$pvalues


# Adjusted P Values
out_fast_hsf_younger$adjusted_pvalues

# Stochastic Dominance
# Participants with all quantile differences > 0
nq_fast_younger <- length(out_fast_hsf_younger$quantiles)
pdmt0_fast_younger <- apply(out_fast_hsf_younger$individual_sf > 0, 2, sum)
print(paste0('In ',sum(pdmt0_fast_younger == nq_fast_younger),' participants (',round(100 * sum(pdmt0_fast_younger == nq_fast_younger) / np_younger, digits = 1),'%), all quantile differences are more than to zero'))

# Participants with all quantile differences < 0
pdlt0_fast_younger <- apply(out_fast_hsf_younger$individual_sf < 0, 2, sum)
print(paste0('In ',sum(pdlt0_fast_younger == nq_fast_younger),' participants (',round(100 * sum(pdlt0_fast_younger == nq_fast_younger) / np_younger, digits = 1),'%), all quantile differences are less than to zero'))



####################################################################################
### FAST CONDITION 
### younger Adults - Counterbalance A
####################################################################################

# Filter DF to olderer Adults
hsf_fast_younger_A <- hsf_fast %>% 
  dplyr::filter(counterbalance=="A")

# Create Tibble
hsf_fast_tibble_younger_A <- tibble(rt = hsf_fast_younger_A$key_resp.rt,
             cond = factor(hsf_fast_younger_A$thisCond),
             id = factor(hsf_fast_younger_A$participant))

# Shift Function
out_fast_sf_younger_A <- shifthd_pbci(hsf_fast_tibble_younger_A, rt ~ cond, doall = TRUE, nboot = 200, adj_ci = TRUE) # Function

plot_fast_sf_younger_A <- plot_sf(out_fast_sf_younger_A, plot_theme = 1)[[1]] + 
     theme(axis.text = element_text(size = 16, colour="black"))+labs(title = "SF - younger Adults - A - Fast") # Plot
plot_fast_sf_younger_A

# Hierarchical Shift Function
out_fast_hsf_younger_A <- hsf(hsf_fast_tibble_younger_A, rt ~ cond + id)

plot_fast_hsf_younger_A <- plot_hsf(out_fast_hsf_younger_A)+labs(title = "HSF - younger Adults - A - Fast")
plot_fast_hsf_younger_A


# Percentile Boostrap Hierarchical Shift Function
set.seed(8899)
hsf_pb_fast_younger_A <- hsf_pb(hsf_fast_tibble_younger_A, rt ~ cond + id) # Boostrap Samples

# Plot Confidence Intervals
out_fast_hsf_ci_younger_A <- plot_hsf_pb(hsf_pb_fast_younger_A, interv = "ci") +labs(title = "HSF - younger Adults - A - Fast + CI")
out_fast_hsf_ci_younger_A

# Plot Boostrap Distributions
set.seed(8899)
out_fast_hsf_boot_younger_A <- plot_hsf_pb_dist(hsf_pb_fast_younger_A)+labs(title = "Boostrap Difference Distributions - younger Adults - A - Fast")
out_fast_hsf_boot_younger_A


# P Values
out_fast_hsf_younger_A$pvalues


# Adjusted P Values
out_fast_hsf_younger_A$adjusted_pvalues

# Stochastic Dominance
# Participants with all quantile differences > 0
nq_fast_younger_A <- length(out_fast_hsf_younger_A$quantiles)
pdmt0_fast_younger_A <- apply(out_fast_hsf_younger_A$individual_sf > 0, 2, sum)
print(paste0('In ',sum(pdmt0_fast_younger_A == nq_fast_younger_A),' participants (',round(100 * sum(pdmt0_fast_younger_A == nq_fast_younger_A) / np_younger_A, digits = 1),'%), all quantile differences are more than to zero'))

# Participants with all quantile differences < 0
pdlt0_fast_younger_A <- apply(out_fast_hsf_younger_A$individual_sf < 0, 2, sum)
print(paste0('In ',sum(pdlt0_fast_younger_A == nq_fast_younger_A),' participants (',round(100 * sum(pdlt0_fast_younger_A == nq_fast_younger_A) / np_younger_A, digits = 1),'%), all quantile differences are less than to zero'))


####################################################################################
### FAST CONDITION 
### younger Adults - Counterbalance B
####################################################################################

# Filter DF to olderer Adults
hsf_fast_younger_B <- hsf_fast %>% 
  dplyr::filter(counterbalance=="B")

# Create Tibble
hsf_fast_tibble_younger_B <- tibble(rt = hsf_fast_younger_B$key_resp.rt,
             cond = factor(hsf_fast_younger_B$thisCond),
             id = factor(hsf_fast_younger_B$participant))

# Shift Function
out_fast_sf_younger_B <- shifthd_pbci(hsf_fast_tibble_younger_B, rt ~ cond, doall = TRUE, nboot = 200, adj_ci = TRUE) # Function

plot_fast_sf_younger_B <- plot_sf(out_fast_sf_younger_B, plot_theme = 1)[[1]] + 
     theme(axis.text = element_text(size = 16, colour="black"))+labs(title = "SF - younger Adults - B - Fast") # Plot
plot_fast_sf_younger_B

# Hierarchical Shift Function
out_fast_hsf_younger_B <- hsf(hsf_fast_tibble_younger_B, rt ~ cond + id)

plot_fast_hsf_younger_B <- plot_hsf(out_fast_hsf_younger_B)+labs(title = "HSF - younger Adults - B - Fast")
plot_fast_hsf_younger_B


# Percentile Boostrap Hierarchical Shift Function
set.seed(8899)
hsf_pb_fast_younger_B <- hsf_pb(hsf_fast_tibble_younger_B, rt ~ cond + id) # Boostrap Samples

# Plot Confidence Intervals
out_fast_hsf_ci_younger_B <- plot_hsf_pb(hsf_pb_fast_younger_B, interv = "ci") +labs(title = "HSF - younger Adults - B - Fast + CI")
out_fast_hsf_ci_younger_B

# Plot Boostrap Distributions
set.seed(8899)
out_fast_hsf_boot_younger_B <- plot_hsf_pb_dist(hsf_pb_fast_younger_B)+labs(title = "Boostrap Difference Distributions - younger Adults - B - Fast")
out_fast_hsf_boot_younger_B


# P Values
out_fast_hsf_younger_B$pvalues


# Adjusted P Values
out_fast_hsf_younger_B$adjusted_pvalues

# Stochastic Dominance
# Participants with all quantile differences > 0
nq_fast_younger_B <- length(out_fast_hsf_younger_B$quantiles)
pdmt0_fast_younger_B <- apply(out_fast_hsf_younger_B$individual_sf > 0, 2, sum)
print(paste0('In ',sum(pdmt0_fast_younger_B == nq_fast_younger_B),' participants (',round(100 * sum(pdmt0_fast_younger_B == nq_fast_younger_B) / np_younger_B, digits = 1),'%), all quantile differences are more than to zero'))

# Participants with all quantile differences < 0
pdlt0_fast_younger_B <- apply(out_fast_hsf_younger_B$individual_sf < 0, 2, sum)
print(paste0('In ',sum(pdlt0_fast_younger_B == nq_fast_younger_B),' participants (',round(100 * sum(pdlt0_fast_younger_B == nq_fast_younger_B) / np_younger_B, digits = 1),'%), all quantile differences are less than to zero'))





```

## (RT) ANCOVA

```{r}

# Dropping fast condition due to no olderer Adult fast condition data
summaryRT_ancova <- subset(summaryRT, thisCond != "pre_fast")
summaryRT_ancova <- subset(summaryRT_ancova, thisCond != "post_fast")
#summaryRT_ancova <- summaryRT_ancova[summaryRT_ancova$N >= 21, ]

fit <- lm(key_resp.rt ~ thisCond * group, data = summaryRT_ancova)
ReactionTimeANCOVA <- cat_plot(model = fit, pred = thisCond, modx = group, plot.points = TRUE)+ scale_x_discrete(limits=c("pre_spont", "post_spont", "pre_slow", "post_slow"))+labs(x="Breathing Condition", y="Reaction Time - Seconds", title = "ANCOVA - younger & olderer Adults - Reaction Time")


ReactionTimeANCOVA

report(fit)


```

## (RT) ANOVA

```{r}

library(rstantools)
library(ggstatsplot)


# ANOVA for young ADULTS
data_onlyCor_young <- summarySTATS %>% 
  dplyr::filter(group=="younger")


ANOVA_Table_young <- aov(key_resp.rt ~ thisCond, data = data_onlyCor_young)

ANOVA_Plot_young <- ggbetweenstats(
  data = data_onlyCor_young,
  x = thisCond,
  y = key_resp.rt
)+ scale_x_discrete(limits=c("pre_spont", "post_spont", "pre_fast", "post_fast", "pre_slow", "post_slow"))+labs(x="Breathing Condition", y="Reaction Time - Seconds", title = "ANOVA - younger Adults Reaction Time", subtitle = "", caption="")


ANOVA_Plot_young

summary(ANOVA_Table_young)

report(ANOVA_Table_young)


# ANOVA for younger Adults in Counterbalance A

data_onlyCor_youngA <- summarySTATS %>% 
  dplyr::filter(group=="younger", counterbalance=="A")


ANOVA_Table_youngA <- aov(key_resp.rt ~ thisCond, data = data_onlyCor_youngA)

ANOVA_Plot_youngA <- ggbetweenstats(
  data = data_onlyCor_youngA,
  x = thisCond,
  y = key_resp.rt
)+ scale_x_discrete(limits=c("pre_spont", "post_spont", "pre_fast", "post_fast", "pre_slow", "post_slow"))+labs(x="Breathing Condition", y="Reaction Time - Seconds", title = "ANOVA - younger Adults Counterbalance Group A (Spont-Fast-Slow) Reaction Time", subtitle = "", caption="")


ANOVA_Plot_youngA

summary(ANOVA_Table_youngA)

report(ANOVA_Table_youngA)


# ANOVA for younger Adults in Counterbalance B

data_onlyCor_youngB <- summarySTATS %>% 
  dplyr::filter(group=="younger", counterbalance=="B")


ANOVA_Table_youngB <- aov(key_resp.rt ~ thisCond, data = data_onlyCor_young)

ANOVA_Plot_youngB <- ggbetweenstats(
  data = data_onlyCor_youngB,
  x = thisCond,
  y = key_resp.rt
)+ scale_x_discrete(limits=c("pre_spont", "post_spont", "pre_slow", "post_slow", "pre_fast", "post_fast"))+labs(x="Breathing Condition", y="Reaction Time - Seconds", title = "ANOVA - younger Adults Counterbalance Group B (Spont-Slow-Fast) Reaction Time", subtitle = "", caption="")


ANOVA_Plot_youngB

summary(ANOVA_Table_youngB)

report(ANOVA_Table_youngB)



# ANOVA for olderER ADULTS 

data_onlyCor_older <- summarySTATS %>% 
  dplyr::filter(group=="olderer")


ANOVA_Table_older <- aov(key_resp.rt ~ thisCond, data = data_onlyCor_older)

ANOVA_Plot_older <- ggbetweenstats(
  data = data_onlyCor_older,
  x = thisCond,
  y = key_resp.rt
)+ scale_x_discrete(limits=c("pre_spont", "post_spont", "pre_slow", "post_slow"))+labs(x="Breathing Condition", y="Reaction Time - Seconds", title = "ANOVA - olderer Adults Reaction Time", subtitle = "", caption="")



ANOVA_Plot_older

summary(ANOVA_Table_older)

report(ANOVA_Table_older)
```

## (RT) Repeated Measures T-Tests

```{r}

library(easystats)
library(report)
library(raincloudplots)

# Repeated T-Test for BOTH Groups
repeated_t_prepost_slow <- t.test(summaryDF_wide$pre_slow_avg_rt,  summaryDF_wide$post_slow_avg_rt, paired = TRUE, alternative = "two.sided")
report(repeated_t_prepost_slow)

# Rain Cloud BOTH Groups
df_1x1_BOTH_Slow <- data_1x1(
  array_1 = summaryDF_wide$pre_slow_avg_rt,
  array_2 = summaryDF_wide$post_slow_avg_rt,
  jit_distance = .09,
  jit_seed = 321)


raincloud_BOTH_Slow <- raincloud_1x1_repmes(
  data = df_1x1_BOTH_Slow,
  colors = (c('darkgreen', 'lightgreen')),
  fills = (c('darkgreen', 'lightgreen')),
  line_color = 'gray',
  line_alpha = .3,
  size = 1,
  alpha = .6,
  align_clouds = FALSE) +
scale_x_continuous(breaks=c(1,2), labels=c("Pre Slow", "Post Slow"), limits=c(0, 3)) +
  theme_classic()+
  labs(x = "Breathing Condition", y = "Reaction Time - Seconds",
       title = "(A) - T-Test forBoth younger & olderer Adults - Reaction Time - Slow Breathing")

raincloud_BOTH_Slow




# Repeated T-Test for older Group
data_prepost_slow_older <- summaryDF_wide %>% 
  dplyr::filter(group=="olderer")

repeated_t_prepost_slow_older <- t.test(data_prepost_slow_older$pre_slow_avg_rt,  data_prepost_slow_older$post_slow_avg_rt, paired = TRUE, alternative = "two.sided")
report(repeated_t_prepost_slow_older)

# Rain Cloud older Group
df_1x1_older <- data_1x1(
  array_1 = data_prepost_slow_older$pre_slow_avg_rt,
  array_2 = data_prepost_slow_older$post_slow_avg_rt,
  jit_distance = .09,
  jit_seed = 321)


raincloud_older_slow <- raincloud_1x1_repmes(
  data = df_1x1_older,
  colors = (c('dodgerblue', 'darkorange')),
  fills = (c('dodgerblue', 'darkorange')),
  line_color = 'gray',
  line_alpha = .3,
  size = 1,
  alpha = .6,
  align_clouds = FALSE) +
 
scale_x_continuous(breaks=c(1,2), labels=c("Pre Slow", "Post Slow"), limits=c(0, 3)) +
  theme_classic()+
  labs(x = "Breathing Condition", y = "Reaction Time - Seconds",
       title = "(B) - T-Test for olderer Adults - Reaction Time - Slow Breathing") 

raincloud_older_slow



# Repeated T-Tests for younger Adults No Counterbalance - SLOW
data_prepost_young_Slow <- summaryDF_wide %>% 
  dplyr::filter(group=="younger")

# young Slow
repeated_t_prepost_slow_young <- t.test(data_prepost_young_Slow$pre_slow_avg_rt,  data_prepost_young_Slow$post_slow_avg_rt, paired = TRUE, alternative = "two.sided")
report(repeated_t_prepost_slow_young)


# Rain Cloud young Slow
df_1x1_young_Slow <- data_1x1(
  array_1 = data_prepost_young_Slow$pre_slow_avg_rt,
  array_2 = data_prepost_young_Slow$post_slow_avg_rt,
  jit_distance = .09,
  jit_seed = 321)


raincloud_young_Slow <- raincloud_1x1_repmes(
  data = df_1x1_young_Slow,
  colors = (c('black', 'red')),
  fills = (c('black', 'red')),
  line_color = 'gray',
  line_alpha = .3,
  size = 1,
  alpha = .6,
  align_clouds = FALSE) +
 
scale_x_continuous(breaks=c(1,2), labels=c("Pre Slow", "Post Slow"), limits=c(0, 3)) +
  theme_classic()+
  labs(x = "Breathing Condition", y = "Reaction Time - Seconds",
       title = "(C) - T-Test for younger Adults - Reaction Time - Slow Breathing") 

raincloud_young_Slow




# Repeated T-Tests for younger Adults Counterbalance A - SLOW
data_prepost_young_Slow_A <- summaryDF_wide %>% 
  dplyr::filter(group=="younger", counterbalance=="A")

# young Slow
repeated_t_prepost_young_Slow_A <- t.test(data_prepost_young_Slow_A$pre_slow_avg_rt,  data_prepost_young_Slow_A$post_slow_avg_rt, paired = TRUE, alternative = "two.sided")
report(repeated_t_prepost_young_Slow_A)


# Rain Cloud young Slow
df_1x1_young_Slow_A <- data_1x1(
  array_1 = data_prepost_young_Slow_A$pre_slow_avg_rt,
  array_2 = data_prepost_young_Slow_A$post_slow_avg_rt,
  jit_distance = .09,
  jit_seed = 321)


raincloud_young_Slow_A <- raincloud_1x1_repmes(
  data = df_1x1_young_Slow_A,
  colors = (c('black', 'red')),
  fills = (c('black', 'red')),
  line_color = 'gray',
  line_alpha = .3,
  size = 1,
  alpha = .6,
  align_clouds = FALSE) +
 
scale_x_continuous(breaks=c(1,2), labels=c("Pre Slow", "Post Slow"), limits=c(0, 3)) +
  theme_classic()+
  labs(x = "Breathing Condition", y = "Reaction Time - Seconds",
       title = "(C.1) - T-Test for younger Adults - Reaction Time - Slow Breathing - CB: A") 

raincloud_young_Slow_A





# Repeated T-Tests for younger Adults Counterbalance B - SLOW
data_prepost_young_Slow_B <- summaryDF_wide %>% 
  dplyr::filter(group=="younger", counterbalance=="B")

# young Slow
repeated_t_prepost_young_Slow_B <- t.test(data_prepost_young_Slow_B$pre_slow_avg_rt,  data_prepost_young_Slow_B$post_slow_avg_rt, paired = TRUE, alternative = "two.sided")
report(repeated_t_prepost_young_Slow_B)


# Rain Cloud young Slow
df_1x1_young_Slow_B <- data_1x1(
  array_1 = data_prepost_young_Slow_B$pre_slow_avg_rt,
  array_2 = data_prepost_young_Slow_B$post_slow_avg_rt,
  jit_distance = .09,
  jit_seed = 321)


raincloud_young_Slow_B <- raincloud_1x1_repmes(
  data = df_1x1_young_Slow_B,
  colors = (c('black', 'red')),
  fills = (c('black', 'red')),
  line_color = 'gray',
  line_alpha = .3,
  size = 1,
  alpha = .6,
  align_clouds = FALSE) +
 
scale_x_continuous(breaks=c(1,2), labels=c("Pre Slow", "Post Slow"), limits=c(0, 3)) +
  theme_classic()+
  labs(x = "Breathing Condition", y = "Reaction Time - Seconds",
       title = "(C.2) - T-Test for younger Adults - Reaction Time - Slow Breathing - CB: B") 

raincloud_young_Slow_B




# Repeated T-Tests for younger Adults in Fast ondition
data_prepost_young_Fast <- summaryDF_wide %>% 
  dplyr::filter(group=="younger")


# young Fast
repeated_t_prepost_young_Fast <- t.test(data_prepost_young_Fast$pre_fast_avg_rt,  data_prepost_young_Fast$post_fast_avg_rt, paired = TRUE, alternative = "two.sided")
report(repeated_t_prepost_young_Fast)


# Rain Cloud young Fast
df_1x1_young_Fast <- data_1x1(
  array_1 = data_prepost_young_Fast$pre_fast_avg_rt,
  array_2 = data_prepost_young_Fast$post_fast_avg_rt,
  jit_distance = .09,
  jit_seed = 321)


raincloud_young_Fast <- raincloud_1x1_repmes(
  data = df_1x1_young_Fast,
  colors = (c('pink', 'lightblue')),
  fills = (c('pink', 'lightblue')),
  line_color = 'gray',
  line_alpha = .3,
  size = 1,
  alpha = .6,
  align_clouds = FALSE) +
 
scale_x_continuous(breaks=c(1,2), labels=c("Pre Fast", "Post Fast"), limits=c(0, 3)) +
  theme_classic()+
  labs(x = "Breathing Condition", y = "Reaction Time - Seconds",
       title = "(D) - T-Test for younger Adults - Reaction Time - Fast Breathing") 

raincloud_young_Fast


#Repeated T-Tests for younger Adults Counterbalance A - Fast

data_prepost_young_Fast_A <- summaryDF_wide %>% 
dplyr::filter(group=="younger", counterbalance=="A")

# young Fast
repeated_t_prepost_young_Fast_A <- t.test(data_prepost_young_Fast_A$pre_fast_avg_rt,  data_prepost_young_Fast_A$post_fast_avg_rt, paired = TRUE, alternative = "two.sided")
report(repeated_t_prepost_young_Fast_A)


# Rain Cloud young Fast
df_1x1_young_Fast_A <- data_1x1(
  array_1 = data_prepost_young_Fast_A$pre_fast_avg_rt,
  array_2 = data_prepost_young_Fast_A$post_fast_avg_rt,
  jit_distance = .09,
  jit_seed = 321)


raincloud_young_Fast_A <- raincloud_1x1_repmes(
  data = df_1x1_young_Fast_A,
  colors = (c('pink', 'lightblue')),
  fills = (c('pink', 'lightblue')),
  line_color = 'gray',
  line_alpha = .3,
  size = 1,
  alpha = .6,
  align_clouds = FALSE) +
 
scale_x_continuous(breaks=c(1,2), labels=c("Pre Fast", "Post Fast"), limits=c(0, 3)) +
  theme_classic()+
  labs(x = "Breathing Condition", y = "Reaction Time - Seconds",
       title = "(D.1) - T-Test for younger Adults - Reaction Time - Fast Breathing - CB: A") 

raincloud_young_Fast_A



#Repeated T-Tests for younger Adults Counterbalance B - Fast
# young Fast
data_prepost_young_Fast_B <- summaryDF_wide %>% 
dplyr::filter(group=="younger", counterbalance=="B")

# young Fast
repeated_t_prepost_young_Fast_B <- t.test(data_prepost_young_Fast_B$pre_fast_avg_rt,  data_prepost_young_Fast_B$post_fast_avg_rt, paired = TRUE, alternative = "two.sided")
report(repeated_t_prepost_young_Fast_B)


# Rain Cloud young Fast
df_1x1_young_Fast_B <- data_1x1(
  array_1 = data_prepost_young_Fast_B$pre_fast_avg_rt,
  array_2 = data_prepost_young_Fast_B$post_fast_avg_rt,
  jit_distance = .09,
  jit_seed = 321)


raincloud_young_Fast_B <- raincloud_1x1_repmes(
  data = df_1x1_young_Fast_B,
  colors = (c('pink', 'lightblue')),
  fills = (c('pink', 'lightblue')),
  line_color = 'gray',
  line_alpha = .3,
  size = 1,
  alpha = .6,
  align_clouds = FALSE) +
 
scale_x_continuous(breaks=c(1,2), labels=c("Pre Fast", "Post Fast"), limits=c(0, 3)) +
  theme_classic()+
  labs(x = "Breathing Condition", y = "Reaction Time - Seconds",
       title = "(D.2) - T-Test for younger Adults - Reaction Time - Fast Breathing - CB: B") 

raincloud_young_Fast_B


```

# For UP Direction Only - Testing T-Tests {style="color: pink"}

This analyses was developed for proof of concept only.

```{r}
# Repeated T-Tests for younger Adults No Counterbalance - SLOW
data_prepost_young_Slow_Up <- summaryDF_wide %>% 
  dplyr::filter(group=="younger", slowScore=="Up")

# young Slow
repeated_t_prepost_slow_young_Up <- t.test(data_prepost_young_Slow_Up$pre_slow_avg_rt,  data_prepost_young_Slow_Up$post_slow_avg_rt, paired = TRUE, alternative = "two.sided")
report(repeated_t_prepost_slow_young_Up)


# Rain Cloud young Slow
df_1x1_young_Slow_Up <- data_1x1(
  array_1 = data_prepost_young_Slow_Up$pre_slow_avg_rt,
  array_2 = data_prepost_young_Slow_Up$post_slow_avg_rt,
  jit_distance = .09,
  jit_seed = 321)


raincloud_young_Slow_Up <- raincloud_1x1_repmes(
  data = df_1x1_young_Slow_Up,
  colors = (c('black', 'red')),
  fills = (c('black', 'red')),
  line_color = 'gray',
  line_alpha = .3,
  size = 1,
  alpha = .6,
  align_clouds = FALSE) +
 
scale_x_continuous(breaks=c(1,2), labels=c("Pre Slow", "Post Slow"), limits=c(0, 3)) +
  theme_classic()+
  labs(x = "Breathing Condition", y = "Reaction Time - Seconds",
       title = "(C) - T-Test for younger Adults - Reaction Time - Slow Breathing") 

raincloud_young_Slow_Up
```

## (RT) Non-Parametric T-Tests

```{r}


# NON-PARAMETRIC T-TESTS
# Inherit's DataFrames from regular repeated T-Tests from above!!

# BOTH GROUPS
Nonpara_t_prepost_slow_BOTH <- wilcox.test(summaryDF_wide$pre_slow_avg_rt, summaryDF_wide$post_slow_avg_rt, paired = T)
report(Nonpara_t_prepost_slow_BOTH)


# olderER Slow
Nonpara_t_prepost_slow_older <- wilcox.test(data_prepost_slow_older$pre_slow_avg_rt, data_prepost_slow_older$post_slow_avg_rt, paired = T)
report(Nonpara_t_prepost_slow_older)


# young Slow
Nonpara_t_prepost_slow_young <- wilcox.test(data_prepost_slow_young$pre_slow_avg_rt, data_prepost_slow_young$post_slow_avg_rt, paired = T)
report(Nonpara_t_prepost_slow_young)

# young Fast
Nonpara_t_prepost_fast_young <- wilcox.test(data_prepost_slow_young$pre_fast_avg_rt, data_prepost_slow_young$post_fast_avg_rt, paired = T)
report(Nonpara_t_prepost_fast_young)
```

# ACCURACY ANALYSIS {style="color: gray"}

## (Acc) ANCOVA

```{r}

# Drop fast conditions due to lack of olderer Adult group fast data
summaryCorr_ancova <- subset(summaryCorr, thisCond != "pre_fast") 
summaryCorr_ancova <- subset(summaryCorr_ancova, thisCond != "post_fast")


#ANCOVA Model
fit2 <- lm(key_resp.corr ~ thisCond * group, data = summaryCorr_ancova)
AccuracyPlot <- cat_plot(model = fit2, pred = thisCond, modx = group, plot.points = TRUE)+ scale_x_discrete(limits=c("pre_spont", "post_spont", "pre_slow", "post_slow"))+labs(x="Breathing Condition", y="Accuracy Score - %", title = "ANCOVA - younger & olderer Adults - Accuracy")

AccuracyPlot
summary(fit2)
report(fit2)

```

## (Acc) ANOVA

```{r}

library(rstantools)
library(ggstatsplot)


# ANOVA for olderer Adults - Accuracy

final_df_Corr_older <- summarySTATS %>% 
  dplyr::filter(group=="olderer")


ANOVA_Table_Corr_older <- aov(key_resp.corr ~ thisCond, data = final_df_Corr_older)

ANOVA_Plot_Corr_older <- ggbetweenstats(
  data = final_df_Corr_older,
  x = thisCond,
  y = key_resp.corr
)+ scale_x_discrete(limits=c("pre_spont", "post_spont", "pre_slow", "post_slow"))+labs(x="Breathing Condition", y="Accuracy - %", title = "ANOVA - olderer Adults - Accuracy ", subtitle = "", caption="")



ANOVA_Plot_Corr_older

summary(ANOVA_Table_Corr_older)

report(ANOVA_Table_Corr_older)






# ANOVA for younger Adults - Accuracy

final_df_corr_young <- summarySTATS %>% 
  dplyr::filter(group=="younger")


ANOVA_Table_Corr_young <- aov(key_resp.corr ~ thisCond, data = final_df_corr_young)

ANOVA_Plot_Corr_young <- ggbetweenstats(
  data = final_df_corr_young,
  x = thisCond,
  y = key_resp.corr
)+ scale_x_discrete(limits=c("pre_spont", "post_spont", "pre_slow", "post_slow", "pre_fast", "post_fast"))+labs(x="Breathing Condition", y="Accuracy - %", title = "ANOVA - younger Adults - Accuracy", subtitle = "", caption="")


ANOVA_Plot_Corr_young

summary(ANOVA_Table_Corr_young)

report(ANOVA_Table_Corr_young)



# ANOVA for younger Adults - Accuracy - Counterbalance A

final_df_corr_young_A <- summarySTATS %>% 
  dplyr::filter(group=="younger", counterbalance=="A")


ANOVA_Table_Corr_young_A <- aov(key_resp.corr ~ thisCond, data = final_df_corr_young_A)

ANOVA_Plot_Corr_young_A <- ggbetweenstats(
  data = final_df_corr_young_A,
  x = thisCond,
  y = key_resp.corr
)+ scale_x_discrete(limits=c("pre_spont", "post_spont", "pre_slow", "post_slow", "pre_fast", "post_fast"))+labs(x="Breathing Condition", y="Accuracy - %", title = "ANOVA - younger Adults - Accuracy - CB: A", subtitle = "", caption="")


ANOVA_Plot_Corr_young_A

summary(ANOVA_Table_Corr_young_A)

report(ANOVA_Table_Corr_young_A)



# ANOVA for younger Adults - Accuracy - Counterbalance B

final_df_corr_young_B <- summarySTATS %>% 
  dplyr::filter(group=="younger", counterbalance=="B")


ANOVA_Table_Corr_young_B <- aov(key_resp.corr ~ thisCond, data = final_df_corr_young_B)

ANOVA_Plot_Corr_young_B <- ggbetweenstats(
  data = final_df_corr_young_B,
  x = thisCond,
  y = key_resp.corr
)+ scale_x_discrete(limits=c("pre_spont", "post_spont", "pre_slow", "post_slow", "pre_fast", "post_fast"))+labs(x="Breathing Condition", y="Accuracy - %", title = "ANOVA - younger Adults - Accuracy - CB: B", subtitle = "", caption="")


ANOVA_Plot_Corr_young_B

summary(ANOVA_Table_Corr_young_B)

report(ANOVA_Table_Corr_young_B)

```

## (Acc) Repeated Measures T-Tests

```{r}

library(easystats)
library(report)
library(raincloudplots)

# Repeated T-Test for BOTH Groups
repeated_t_prepost_Corr_Slow <- t.test(summaryDF_wide$pre_slow_avg_corr,  summaryDF_wide$post_slow_avg_corr, paired = TRUE, alternative = "two.sided")
report(repeated_t_prepost_Corr_Slow)

# Rain Cloud BOTH Groups
df_1x1_BOTH_Corr_Slow <- data_1x1(
  array_1 = summaryDF_wide$pre_slow_avg_corr,
  array_2 = summaryDF_wide$post_slow_avg_corr,
  jit_distance = .09,
  jit_seed = 321)


raincloud_Corr_BOTH_Slow <- raincloud_1x1_repmes(
  data = df_1x1_BOTH_Corr_Slow,
  colors = (c('darkgreen', 'lightgreen')),
  fills = (c('darkgreen', 'lightgreen')),
  line_color = 'gray',
  line_alpha = .3,
  size = 1,
  alpha = .6,
  align_clouds = FALSE) +
 
scale_x_continuous(breaks=c(1,2), labels=c("Pre Slow", "Post Slow"), limits=c(0, 3)) +
  theme_classic()+
  labs(x = "Breathing Condition", y = "Accuracy - %",
       title = "(A) - T-Test young & olderer Adults - Accuracy - Slow Breathing") 

raincloud_Corr_BOTH_Slow




# Repeated T-Test for older Group
data_Corr_slow_older <- summaryDF_wide %>% 
  dplyr::filter(group=="olderer")

repeated_t_prepost_slow_older_Corr <- t.test(data_Corr_slow_older$pre_slow_avg_corr,  data_Corr_slow_older$post_slow_avg_corr, paired = TRUE, alternative = "two.sided")
report(repeated_t_prepost_slow_older_Corr)

# Rain Cloud older Group
df_1x1_older_Corr <- data_1x1(
  array_1 = data_Corr_slow_older$pre_slow_avg_corr,
  array_2 = data_Corr_slow_older$post_slow_avg_corr,
  jit_distance = .09,
  jit_seed = 321)


raincloud_older_slow_Corr <- raincloud_1x1_repmes(
  data = df_1x1_older_Corr,
  colors = (c('dodgerblue', 'darkorange')),
  fills = (c('dodgerblue', 'darkorange')),
  line_color = 'gray',
  line_alpha = .3,
  size = 1,
  alpha = .6,
  align_clouds = FALSE) +
 
scale_x_continuous(breaks=c(1,2), labels=c("Pre Slow", "Post Slow"), limits=c(0, 3)) +
  theme_classic()+
  labs(x = "Breathing Condition", y = "Accuracy - %",
       title = "(B) - olderer Adult Slow Breathing") 

raincloud_older_slow_Corr





# Repeated T-Tests for young Adults - Slow Breathing
data_Corr_slow_young <- summaryDF_wide %>% 
  dplyr::filter(group=="younger")

# young Slow
repeated_t_prepost_slow_young_Corr <- t.test(data_Corr_slow_young$pre_slow_avg_corr,  data_Corr_slow_young$post_slow_avg_corr, paired = TRUE, alternative = "two.sided")
report(repeated_t_prepost_slow_young_Corr)


# Rain Cloud young Slow
df_1x1_young_Slow_Corr <- data_1x1(
  array_1 = data_Corr_slow_young$pre_slow_avg_corr,
  array_2 = data_Corr_slow_young$post_slow_avg_corr,
  jit_distance = .09,
  jit_seed = 321)


raincloud_young_Slow_Corr <- raincloud_1x1_repmes(
  data = df_1x1_young_Slow_Corr,
  colors = (c('black', 'red')),
  fills = (c('black', 'red')),
  line_color = 'gray',
  line_alpha = .3,
  size = 1,
  alpha = .6,
  align_clouds = FALSE) +
 
scale_x_continuous(breaks=c(1,2), labels=c("Pre Slow", "Post Slow"), limits=c(0, 3)) +
  theme_classic()+
  labs(x = "Breathing Condition", y = "Accuracy - %",
       title = "(C) - young Adult Slow Breathing") 

raincloud_young_Slow_Corr


# Repeated T-Tests for younger Adults - Slow Breathing - Counterbalance A
data_Corr_slow_young_A <- summaryDF_wide %>% 
  dplyr::filter(group=="younger", counterbalance=="A")

# young Slow
repeated_t_prepost_slow_young_Corr_A <- t.test(data_Corr_slow_young_A$pre_slow_avg_corr,  data_Corr_slow_young_A$post_slow_avg_corr, paired = TRUE, alternative = "two.sided")
report(repeated_t_prepost_slow_young_Corr_A)


# Rain Cloud young Slow
df_1x1_young_Slow_Corr_A <- data_1x1(
  array_1 = data_Corr_slow_young_A$pre_slow_avg_corr,
  array_2 = data_Corr_slow_young_A$post_slow_avg_corr,
  jit_distance = .09,
  jit_seed = 321)


raincloud_young_Slow_Corr_A <- raincloud_1x1_repmes(
  data = df_1x1_young_Slow_Corr_A,
  colors = (c('black', 'red')),
  fills = (c('black', 'red')),
  line_color = 'gray',
  line_alpha = .3,
  size = 1,
  alpha = .6,
  align_clouds = FALSE) +
 
scale_x_continuous(breaks=c(1,2), labels=c("Pre Slow", "Post Slow"), limits=c(0, 3)) +
  theme_classic()+
  labs(x = "Breathing Condition", y = "Accuracy - %",
       title = "(C.1) - T-Test young Adults - Accuracy - Slow Breathing - CB: A") 

raincloud_young_Slow_Corr_A



# Repeated T-Tests for younger Adults - Slow Breathing - Counterbalance A
data_Corr_slow_young_B <- summaryDF_wide %>% 
  dplyr::filter(group=="younger", counterbalance=="B")

# young Slow
repeated_t_prepost_slow_young_Corr_B <- t.test(data_Corr_slow_young_B$pre_slow_avg_corr,  data_Corr_slow_young_B$post_slow_avg_corr, paired = TRUE, alternative = "two.sided")
report(repeated_t_prepost_slow_young_Corr_B)


# Rain Cloud young Slow
df_1x1_young_Slow_Corr_B <- data_1x1(
  array_1 = data_Corr_slow_young_B$pre_slow_avg_corr,
  array_2 = data_Corr_slow_young_B$post_slow_avg_corr,
  jit_distance = .09,
  jit_seed = 321)


raincloud_young_Slow_Corr_B <- raincloud_1x1_repmes(
  data = df_1x1_young_Slow_Corr_B,
  colors = (c('black', 'red')),
  fills = (c('black', 'red')),
  line_color = 'gray',
  line_alpha = .3,
  size = 1,
  alpha = .6,
  align_clouds = FALSE) +
 
scale_x_continuous(breaks=c(1,2), labels=c("Pre Slow", "Post Slow"), limits=c(0, 3)) +
  theme_classic()+
  labs(x = "Breathing Condition", y = "Accuracy - %",
       title = "(C.2) - T-Test young Adults - Accuracy - Slow Breathing - CB: B") 

raincloud_young_Slow_Corr_B


# Repeated T-Tests for younger Adults - Fast Breathing
data_Corr_fast_young <- summaryDF_wide %>% 
  dplyr::filter(group=="younger")

# young Fast
repeated_t_Corr_fast_young <- t.test(data_Corr_fast_young$pre_fast_avg_corr,  data_Corr_fast_young$post_fast_avg_corr, paired = TRUE, alternative = "two.sided")
report(repeated_t_Corr_fast_young)


# Rain Cloud young Fast
df_1x1_young_Fast_Corr <- data_1x1(
  array_1 = data_Corr_fast_young$pre_fast_avg_corr,
  array_2 = data_Corr_fast_young$post_fast_avg_corr,
  jit_distance = .09,
  jit_seed = 321)


raincloud_young_Fast <- raincloud_1x1_repmes(
  data = df_1x1_young_Fast_Corr,
  colors = (c('pink', 'lightblue')),
  fills = (c('pink', 'lightblue')),
  line_color = 'gray',
  line_alpha = .3,
  size = 1,
  alpha = .6,
  align_clouds = FALSE) +
 
scale_x_continuous(breaks=c(1,2), labels=c("Pre Fast", "Post Fast"), limits=c(0, 3)) +
  theme_classic()+
  labs(x = "Breathing Condition", y = "Accuracy - %",
       title = "(D) - young Adult Fast Breathing") 

raincloud_young_Fast


# Repeated T-Tests for younger Adults - Counterbalance A
data_Corr_fast_young_A <- summaryDF_wide %>% 
  dplyr::filter(group=="younger", counterbalance=="A")

# young Fast
repeated_t_Corr_fast_young_A <- t.test(data_Corr_fast_young_A$pre_fast_avg_corr,  data_Corr_fast_young_A$post_fast_avg_corr, paired = TRUE, alternative = "two.sided")
report(repeated_t_Corr_fast_young_A)


# Rain Cloud young Fast
df_1x1_young_Fast_Corr_A <- data_1x1(
  array_1 = data_Corr_fast_young_A$pre_fast_avg_corr,
  array_2 = data_Corr_fast_young_A$post_fast_avg_corr,
  jit_distance = .09,
  jit_seed = 321)


raincloud_young_Fast_A <- raincloud_1x1_repmes(
  data = df_1x1_young_Fast_Corr_A,
  colors = (c('pink', 'lightblue')),
  fills = (c('pink', 'lightblue')),
  line_color = 'gray',
  line_alpha = .3,
  size = 1,
  alpha = .6,
  align_clouds = FALSE) +
 
scale_x_continuous(breaks=c(1,2), labels=c("Pre Fast", "Post Fast"), limits=c(0, 3)) +
  theme_classic()+
  labs(x = "Breathing Condition", y = "Accuracy - %",
       title = "(D.1) - T-Test young Adults - Accuracy - Fast Breathing - CB: A") 

raincloud_young_Fast_A



# Repeated T-Tests for younger Adults - Counterbalance B
data_Corr_fast_young_B <- summaryDF_wide %>% 
  dplyr::filter(group=="younger", counterbalance=="B")

# young Fast
repeated_t_Corr_fast_young_B <- t.test(data_Corr_fast_young_B$pre_fast_avg_corr,  data_Corr_fast_young_B$post_fast_avg_corr, paired = TRUE, alternative = "two.sided")
report(repeated_t_Corr_fast_young_B)


# Rain Cloud young Fast
df_1x1_young_Fast_Corr_B <- data_1x1(
  array_1 = data_Corr_fast_young_B$pre_fast_avg_corr,
  array_2 = data_Corr_fast_young_B$post_fast_avg_corr,
  jit_distance = .09,
  jit_seed = 321)


raincloud_young_Fast_B <- raincloud_1x1_repmes(
  data = df_1x1_young_Fast_Corr_A,
  colors = (c('pink', 'lightblue')),
  fills = (c('pink', 'lightblue')),
  line_color = 'gray',
  line_alpha = .3,
  size = 1,
  alpha = .6,
  align_clouds = FALSE) +
 
scale_x_continuous(breaks=c(1,2), labels=c("Pre Fast", "Post Fast"), limits=c(0, 3)) +
  theme_classic()+
  labs(x = "Breathing Condition", y = "Accuracy - %",
       title = "(D.2) - T-Test young Adults - Accuracy - Fast Breathing - CB: B") 

raincloud_young_Fast_B

```

## (Acc) Non-Parametric T-Tests

```{r}
# NON-PARAMETRIC T-TESTS
# Inherit's DataFrames from regular repeated T-Tests from above!!

# BOTH GROUPS
Nonpara_t_Corr_slow_BOTH <- wilcox.test(summaryDF_wide$pre_slow_avg_corr, summaryDF_wide$post_slow_avg_corr, paired = T)
report(Nonpara_t_Corr_slow_BOTH)


# olderER Slow
Nonpara_t_Corr_slow_older <- wilcox.test(data_Corr_slow_older$pre_slow_avg_corr, data_Corr_slow_older$post_slow_avg_corr, paired = T)
report(Nonpara_t_Corr_slow_older)


# young Slow
Nonpara_t_Corr_slow_young <- wilcox.test(data_Corr_slow_young$pre_slow_avg_corr, data_Corr_slow_young$post_slow_avg_corr, paired = T)
report(Nonpara_t_Corr_slow_young)

# young Fast
Nonpara_t_Corr_fast_young <- wilcox.test(data_Corr_slow_young$pre_fast_avg_corr, data_Corr_slow_young$post_fast_avg_corr, paired = T)
report(Nonpara_t_Corr_fast_young)
```

## (Acc) DACF Approach to T-Tests

Source: https://link.springer.com/article/10.3758/s13428-020-01407-2

```{r}

library(DACF)

# What is the estimated floor/ceiling effect on some data? Take a look!
rec.mean.var(summaryDF_wide$pre_slow_avg_corr)
rec.mean.var(summaryDF_wide$post_slow_avg_corr)


# BOTH GROUPS - Compares both methods (a) Original Sample, and (b) Truncated Sample
Nonpara_t_Corr_slow_BOTH <- lw.t.test(summaryDF_wide$pre_slow_avg_corr, summaryDF_wide$post_slow_avg_corr, "a")
Nonpara_t_Corr_slow_BOTH


Nonpara_t_Corr_slow_BOTH2 <- lw.t.test(summaryDF_wide$pre_slow_avg_corr, summaryDF_wide$post_slow_avg_corr, "b")
Nonpara_t_Corr_slow_BOTH2



# olderer Adults - Accuracy - Slow Breathing
DACF_olderer_Adults_df <- summaryDF_wide %>% 
  dplyr::filter(group=="olderer")

DACF_t_Corr_slow_older <- lw.t.test(DACF_olderer_Adults_df$pre_slow_avg_corr, DACF_olderer_Adults_df$post_slow_avg_corr, "a")
DACF_t_Corr_slow_older



# younger Adults - Accuracy - Slow Breathing
DACF_younger_Adults_df <- summaryDF_wide %>% 
  dplyr::filter(group=="younger")

DACF_t_Corr_slow_young <- lw.t.test(DACF_younger_Adults_df$pre_slow_avg_corr, DACF_younger_Adults_df$post_slow_avg_corr, "a")
DACF_t_Corr_slow_young



# younger Adults - Accuracy - Slow Breathing - CB: A
DACF_younger_Adults_df_A <- summaryDF_wide %>% 
  dplyr::filter(group=="younger", counterbalance=="A")

DACF_t_Corr_slow_young_A <- lw.t.test(DACF_younger_Adults_df_A$pre_slow_avg_corr, DACF_younger_Adults_df_A$post_slow_avg_corr, "a")
DACF_t_Corr_slow_young_A




# younger Adults - Accuracy - Slow Breathing - CB: B
DACF_younger_Adults_df_B <- summaryDF_wide %>% 
  dplyr::filter(group=="younger", counterbalance=="B")

DACF_t_Corr_slow_young_B <- lw.t.test(DACF_younger_Adults_df_B$pre_slow_avg_corr, DACF_younger_Adults_df_B$post_slow_avg_corr, "a")
DACF_t_Corr_slow_young_B

```

## (Acc) DACF Approach to ANOVA

```{r}
library(rstantools)
library(ggstatsplot)
library(DACF)

# ANOVA for olderer Adults - Accuracy

final_df_Corr_older <- summarySTATS %>% 
  dplyr::filter(group=="olderer")


ANOVA_Table_Corr_older <- lw.f.star(final_df_Corr_older, key_resp.corr ~ thisCond, "a")

ANOVA_Plot_Corr_older <- ggbetweenstats(
  data = final_df_Corr_older,
  x = thisCond,
  y = key_resp.corr
)+ scale_x_discrete(limits=c("pre_spont", "post_spont", "pre_slow", "post_slow"))+labs(x="Breathing Condition", y="Accuracy - %", title = "ANOVA - olderer Adults - Accuracy ", subtitle = "", caption="")


ANOVA_Table_Corr_older_B <- lw.f.star(final_df_Corr_older, key_resp.corr ~ thisCond, "b")

ANOVA_Plot_Corr_older_B <- ggbetweenstats(
  data = final_df_Corr_older,
  x = thisCond,
  y = key_resp.corr
)+ scale_x_discrete(limits=c("pre_spont", "post_spont", "pre_slow", "post_slow"))+labs(x="Breathing Condition", y="Accuracy - %", title = "ANOVA - olderer Adults - Accuracy ", subtitle = "", caption="")




ANOVA_Plot_Corr_older
ANOVA_Table_Corr_older
ANOVA_Plot_Corr_older_B
ANOVA_Table_Corr_older_B
```

# POWER ANALYSES {style="color:gray"}

## (Acc) Power Analysis - Groups

```{r}

library(faux)
library(sjPlot)
library(sjmisc)
library(sjlabelled)
library(effectsize)

df_final_simGROUP_Corr <- final_df %>%dplyr::select(participant, group, key_resp.corr, thisCond)

df_final_simGROUP_Corr <- subset(df_final_simGROUP_Corr, thisCond != "pre_fast")
df_final_simGROUP_Corr <- subset(df_final_simGROUP_Corr, thisCond != "post_fast")

p_valuesGROUP_Corr <- tibble()


for (n in seq(10, 400, by = 1)) {
  
  # Empty vector to store p-values for each simulation
  simulation_p_valuesGROUP_Corr <- c()
  
  # Loop for 4000 simulations
  for (i in 1:4000) {
    
    # Simulate data
    sim_dataGROUP_Corr <- sim_df(df_final_simGROUP_Corr, n, between = c("group", "thisCond")) 
    
    # Perform t-test and get p-value
    testGROUP_Corr <- t.test(key_resp.corr ~ group, data = sim_dataGROUP_Corr) ## for condition addition
    p_valGROUP_Corr <- testGROUP_Corr$p.value
    
    # Add p-value to the vector
    simulation_p_valuesGROUP_Corr <- c(simulation_p_valuesGROUP_Corr, p_valGROUP_Corr)
  }
  
  # Calculate average p-value
  avg_p_valGROUP_Corr <- mean(simulation_p_valuesGROUP_Corr, na.rm = TRUE)
  
  # Save results to data frame
  p_valuesGROUP_Corr <- bind_rows(p_valuesGROUP_Corr, tibble(sample_size = n, avg_p_value = avg_p_valGROUP_Corr))
}


# View the data frame with p-values
print(p_valuesGROUP_Corr)

# Get the sample size where avg_p_value < 0.05 for the first time
first_significant_sample_sizeGROUP_Corr <- p_valuesGROUP_Corr$sample_size[min(which(p_valuesGROUP_Corr$avg_p_value < 0.05))]


# Create the plot
Groups_Corr_Power_Plot <- ggplot(p_valuesGROUP_Corr, aes(x = sample_size, y = avg_p_value)) +
  geom_line() +
  geom_hline(yintercept = 0.05, linetype = "dashed", color = "lightblue") +
  geom_vline(xintercept = first_significant_sample_sizeGROUP_Corr, linetype = "dashed", color = "pink") +
  annotate("text", x = first_significant_sample_sizeGROUP_Corr, y = max(p_valuesGROUP_Corr$avg_p_value), label = paste("N =", first_significant_sample_sizeGROUP_Corr, "per group"), hjust = -0.1) +
  theme_minimal() +
  labs(x = "Sample Size", y = "Average P-Value",
       title = "(A) - olderer & younger Adult Slow Breathing")
       #subtitle = "Red line indicates p = 0.05, Blue line indicates the first point where p < 0.05") 

Groups_Corr_Power_Plot
rm(p_valuesGROUP_Corr)

```

## 

## (Acc) Power Analysis - young ADULTS PRE/POST SLOW

```{r}

library(faux)
library(sjPlot)
library(sjmisc)
library(sjlabelled)
library(effectsize)


data_prepost_slow_young_Corr <- summaryDF_wide %>% 
  dplyr::filter(group=="younger")

df_final_simYS_Corr <- data_Corr_slow_young %>%dplyr::select(participant, post_slow_avg_corr, pre_slow_avg_corr)

p_valuesYS_Corr <- tibble()


for (n in seq(10, 100, by = 1)) {
  
  # Empty vector to store p-values for each simulation
  simulation_p_valuesYS_Corr <- c()
  
  # Loop for 1000 simulations
  for (i in 1:1000) {
    
    # Simulate data
    sim_dataYS_Corr <- sim_df(df_final_simYS_Corr, n) 
    
    # Perform t-test and get p-value
    testYS_Corr <- t.test(sim_dataYS_Corr$pre_slow_avg_corr, sim_dataYS_Corr$post_slow_avg_corr, paired = TRUE, alternative = "two.sided") ## for condition addition
    p_valYS_Corr <- testYS_Corr$p.value
    
    # Add p-value to the vector
    simulation_p_valuesYS_Corr <- c(simulation_p_valuesYS_Corr, p_valYS_Corr)
  }
  
  # Calculate average p-value
  avg_p_valYS_Corr <- mean(simulation_p_valuesYS_Corr, na.rm = TRUE)
  
  # Save results to data frame
  p_valuesYS_Corr <- bind_rows(p_valuesYS_Corr, tibble(sample_size = n, avg_p_value = avg_p_valYS_Corr))
}


# View the data frame with p-values
print(p_valuesYS_Corr)

# Get the sample size where avg_p_value < 0.05 for the first time
first_significant_sample_sizeYS_Corr <- p_valuesYS_Corr$sample_size[min(which(p_valuesYS_Corr$avg_p_value < 0.05))]


# Create the plot
YS_Power_Plot_Corr <- ggplot(p_valuesYS_Corr, aes(x = sample_size, y = avg_p_value)) +
  geom_line() +
  geom_hline(yintercept = 0.05, linetype = "dashed", color = "lightblue") +
  geom_vline(xintercept = first_significant_sample_sizeYS_Corr, linetype = "dashed", color = "pink") +
  annotate("text", x = first_significant_sample_sizeYS_Corr, y = max(p_valuesYS_Corr$avg_p_value), label = paste("N =", first_significant_sample_sizeYS_Corr, "per group"), hjust = -0.1) +
  theme_minimal() +
  labs(x = "Sample Size", y = "Average P-Value",
       title = "(C) - younger Adult Slow Breathing")
       #subtitle = "Red line indicates p = 0.05, Blue line indicates the first point where p < 0.05") 

YS_Power_Plot_Corr
rm(p_valuesYS_Corr)

```

## (Acc) Power Analysis - young ADULTS PRE/POST FAST

```{r}

library(faux)
library(sjPlot)
library(sjmisc)
library(sjlabelled)
library(effectsize)

data_prepost_YF_Corr <- summaryDF_wide %>% 
  dplyr::filter(group=="younger")

df_final_simYF_Corr <- data_prepost_YF_Corr %>%dplyr::select(participant, post_fast_avg_corr, pre_fast_avg_corr)

p_valuesYF_Corr <- tibble()


for (n in seq(10, 600, by = 1)) {
  
  # Empty vector to store p-values for each simulation
  simulation_p_valuesYF_Corr <- c()
  
  # Loop for 6000 simulations
  for (i in 1:6000) {
    
    # Simulate data
    sim_dataYF_Corr <- sim_df(df_final_simYF_Corr, n) 
    
    # Perform t-test and get p-value
    testYF_Corr <- t.test(sim_dataYF_Corr$pre_fast_avg_corr,  sim_dataYF_Corr$post_fast_avg_corr, paired = TRUE, alternative = "two.sided") ## for condition addition
    p_valYF_Corr <- testYF_Corr$p.value
    
    # Add p-value to the vector
    simulation_p_valuesYF_Corr <- c(simulation_p_valuesYF_Corr, p_valYF_Corr)
  }
  
  # Calculate average p-value
  avg_p_valYF_Corr <- mean(simulation_p_valuesYF_Corr, na.rm = TRUE)
  
  # Save results to data frame
  p_valuesYF_Corr <- bind_rows(p_valuesYF_Corr, tibble(sample_size = n, avg_p_value = avg_p_valYF_Corr))
}


# View the data frame with p-values
print(p_valuesYF_Corr)

# Get the sample size where avg_p_value < 0.05 for the first time
first_significant_sample_sizeYF_Corr <- p_valuesYF_Corr$sample_size[min(which(p_valuesYF_Corr$avg_p_value < 0.05))]


# Create the plot
YF_Power_Plot_Corr <- ggplot(p_valuesYF_Corr, aes(x = sample_size, y = avg_p_value)) +
  geom_line() +
  geom_hline(yintercept = 0.05, linetype = "dashed", color = "lightblue") +
  geom_vline(xintercept = first_significant_sample_sizeYF_Corr, linetype = "dashed", color = "pink") +
  annotate("text", x = first_significant_sample_sizeYF_Corr, y = max(p_valuesYF_Corr$avg_p_value), label = paste("N =", first_significant_sample_sizeYF_Corr, "per group"), hjust = -0.1) +
  theme_minimal() +
  labs(x = "Sample Size", y = "Average P-Value",
       title = "(D) - younger Adult Fast Breathing")
       #subtitle = "Red line indicates p = 0.05, Blue line indicates the first point where p < 0.05") 

YF_Power_Plot_Corr
rm(p_valuesYF_Corr)
```

## (Acc) Power Analysis - olderER ADULTS PRE/POST SLOW

```{r}
library(faux)
library(sjPlot)
library(sjmisc)
library(sjlabelled)
library(effectsize)


data_prepost_slow_older_Corr <- summaryDF_wide %>% 
  dplyr::filter(group=="olderer")

df_final_simOS_Corr <- data_prepost_slow_older_Corr %>%dplyr::select(participant, post_slow_avg_corr, pre_slow_avg_corr)

p_valuesOS_Corr <- tibble()


for (n in seq(10, 200, by = 1)) {
  
  # Empty vector to store p-values for each simulation
  simulation_p_valuesOS_Corr <- c()
  
  # Loop for 2000 simulations
  for (i in 1:2000) {
    
    # Simulate data
    sim_dataOS_Corr <- sim_df(df_final_simOS_Corr, n) 
    
    # Perform t-test and get p-value
    testOS_Corr <- t.test(sim_dataOS_Corr$pre_slow_avg_corr,  sim_dataOS_Corr$post_slow_avg_corr, paired = TRUE, alternative = "two.sided") ## for condition addition
    p_valOS_Corr <- testOS_Corr$p.value
    
    # Add p-value to the vector
    simulation_p_valuesOS_Corr <- c(simulation_p_valuesOS_Corr, p_valOS_Corr)
  }
  
  # Calculate average p-value
  avg_p_valOS_Corr <- mean(simulation_p_valuesOS_Corr, na.rm = TRUE)
  
  # Save results to data frame
  p_valuesOS_Corr <- bind_rows(p_valuesOS_Corr, tibble(sample_size = n, avg_p_value = avg_p_valOS_Corr))
}


# View the data frame with p-values
print(p_valuesOS_Corr)

# Get the sample size where avg_p_value < 0.05 for the first time
first_significant_sample_sizeOS_Corr <- p_valuesOS_Corr$sample_size[min(which(p_valuesOS_Corr$avg_p_value < 0.05))]


# Create the plot
OS_Power_Plot_Corr <- ggplot(p_valuesOS_Corr, aes(x = sample_size, y = avg_p_value)) +
  geom_line() +
  geom_hline(yintercept = 0.05, linetype = "dashed", color = "lightblue") +
  geom_vline(xintercept = first_significant_sample_sizeOS_Corr, linetype = "dashed", color = "pink") +
  annotate("text", x = first_significant_sample_sizeOS_Corr, y = max(p_valuesOS_Corr$avg_p_value), label = paste("N =", first_significant_sample_sizeOS_Corr, "per group"), hjust = -0.1) +
  theme_minimal() +
  labs(x = "Sample Size", y = "Average P-Value",
       title = "(B) - olderer Adult Slow Breathing")
       #subtitle = "Red line indicates p = 0.05, Blue line indicates the first point where p < 0.05") 

OS_Power_Plot_Corr
rm(p_valuesOS_Corr)

```

## (RT) Power Analysis - Groups

```{r}

library(faux)
library(sjPlot)
library(sjmisc)
library(sjlabelled)
library(effectsize)

df_final_simGROUP <- final_df_onlyCor %>%dplyr::select(participant, group, key_resp.rt, thisCond)

p_valuesGROUP <- tibble()


for (n in seq(10, 100, by = 1)) {
  
  # Empty vector to store p-values for each simulation
  simulation_p_valuesGROUP <- c()
  
  # Loop for 100 simulations
  for (i in 1:1000) {
    
    # Simulate data
    sim_dataGROUP <- sim_df(df_final_simGROUP, n, between = c("group", "thisCond")) 
    
    # Perform t-test and get p-value
    testGROUP <- t.test(key_resp.rt ~ group, data = sim_dataGROUP) ## for condition addition
    p_valGROUP <- testGROUP$p.value
    
    # Add p-value to the vector
    simulation_p_valuesGROUP <- c(simulation_p_valuesGROUP, p_valGROUP)
  }
  
  # Calculate average p-value
  avg_p_valGROUP <- mean(simulation_p_valuesGROUP, na.rm = TRUE)
  
  # Save results to data frame
  p_valuesGROUP <- bind_rows(p_valuesGROUP, tibble(sample_size = n, avg_p_value = avg_p_valGROUP))
}


# View the data frame with p-values
print(p_valuesGROUP)

# Get the sample size where avg_p_value < 0.05 for the first time
first_significant_sample_sizeGROUP <- p_valuesGROUP$sample_size[min(which(p_valuesGROUP$avg_p_value < 0.05))]


# Create the plot
Both_Groups_RT_Power_Plot <- ggplot(p_valuesGROUP, aes(x = sample_size, y = avg_p_value)) +
  geom_line() +
  geom_hline(yintercept = 0.05, linetype = "dashed", color = "lightblue") +
  geom_vline(xintercept = first_significant_sample_sizeGROUP, linetype = "dashed", color = "pink") +
  annotate("text", x = first_significant_sample_sizeGROUP, y = max(p_valuesGROUP$avg_p_value), label = paste("N =", first_significant_sample_sizeGROUP, "per group"), hjust = -0.1) +
  theme_minimal() +
  labs(x = "Sample Size", y = "Average P-Value",
       title = "(A) - olderer & younger Adult Slow Breathing")
       #subtitle = "Red line indicates p = 0.05, Blue line indicates the first point where p < 0.05") 

Both_Groups_RT_Power_Plot
rm(p_valuesGROUP)

```

## (RT) Power Analysis - young ADULTS PRE/POST SLOW

```{r}

library(faux)
library(sjPlot)
library(sjmisc)
library(sjlabelled)
library(effectsize)


data_prepost_slow_young <- summaryDF_wide %>% 
  dplyr::filter(group=="younger")

df_final_simYS <- data_prepost_slow_young %>%dplyr::select(participant, post_slow_avg_rt, pre_slow_avg_rt)

p_valuesYS <- tibble()


for (n in seq(10, 100, by = 1)) {
  
  # Empty vector to store p-values for each simulation
  simulation_p_valuesYS <- c()
  
  # Loop for 1000 simulations
  for (i in 1:1000) {
    
    # Simulate data
    sim_dataYS <- sim_df(df_final_simYS, n) 
    
    # Perform t-test and get p-value
    testYS <- t.test(sim_dataYS$pre_slow_avg_rt,  sim_dataYS$post_slow_avg_rt, paired = TRUE, alternative = "two.sided") ## for condition addition
    p_valYS <- testYS$p.value
    
    # Add p-value to the vector
    simulation_p_valuesYS <- c(simulation_p_valuesYS, p_valYS)
  }
  
  # Calculate average p-value
  avg_p_valYS <- mean(simulation_p_valuesYS, na.rm = TRUE)
  
  # Save results to data frame
  p_valuesYS <- bind_rows(p_valuesYS, tibble(sample_size = n, avg_p_value = avg_p_valYS))
}


# View the data frame with p-values
print(p_valuesYS)

# Get the sample size where avg_p_value < 0.05 for the first time
first_significant_sample_sizeYS <- p_valuesYS$sample_size[min(which(p_valuesYS$avg_p_value < 0.05))]


# Create the plot
YS_Power_Plot <- ggplot(p_valuesYS, aes(x = sample_size, y = avg_p_value)) +
  geom_line() +
  geom_hline(yintercept = 0.05, linetype = "dashed", color = "lightblue") +
  geom_vline(xintercept = first_significant_sample_sizeYS, linetype = "dashed", color = "pink") +
  annotate("text", x = first_significant_sample_sizeYS, y = max(p_valuesYS$avg_p_value), label = paste("N =", first_significant_sample_sizeYS, "per group"), hjust = -0.1) +
  theme_minimal() +
  labs(x = "Sample Size", y = "Average P-Value",
       title = "(C) - younger Adult Slow Breathing")
       #subtitle = "Red line indicates p = 0.05, Blue line indicates the first point where p < 0.05") 

YS_Power_Plot
rm(p_valuesYS)

```

## (RT) Power Analysis - young ADULTS PRE/POST FAST

```{r}

library(faux)
library(sjPlot)
library(sjmisc)
library(sjlabelled)
library(effectsize)

data_prepost_YF <- summaryDF_wide %>% 
  dplyr::filter(group=="younger")

df_final_simYF <- data_prepost_YF %>%dplyr::select(participant, post_fast_avg_rt, pre_fast_avg_rt)

p_valuesYF <- tibble()


for (n in seq(10, 100, by = 1)) {
  
  # Empty vector to store p-values for each simulation
  simulation_p_valuesYF <- c()
  
  # Loop for 1000 simulations
  for (i in 1:1000) {
    
    # Simulate data
    sim_dataYF <- sim_df(df_final_simYF, n) 
    
    # Perform t-test and get p-value
    testYF <- t.test(sim_dataYF$pre_fast_avg_rt,  sim_dataYF$post_fast_avg_rt, paired = TRUE, alternative = "two.sided") ## for condition addition
    p_valYF <- testYF$p.value
    
    # Add p-value to the vector
    simulation_p_valuesYF <- c(simulation_p_valuesYF, p_valYF)
  }
  
  # Calculate average p-value
  avg_p_valYF <- mean(simulation_p_valuesYF, na.rm = TRUE)
  
  # Save results to data frame
  p_valuesYF <- bind_rows(p_valuesYF, tibble(sample_size = n, avg_p_value = avg_p_valYF))
}


# View the data frame with p-values
print(p_valuesYF)

# Get the sample size where avg_p_value < 0.05 for the first time
first_significant_sample_sizeYF <- p_valuesYF$sample_size[min(which(p_valuesYF$avg_p_value < 0.05))]


# Create the plot
YF_Power_Plot <- ggplot(p_valuesYF, aes(x = sample_size, y = avg_p_value)) +
  geom_line() +
  geom_hline(yintercept = 0.05, linetype = "dashed", color = "lightblue") +
  geom_vline(xintercept = first_significant_sample_sizeYF, linetype = "dashed", color = "pink") +
  annotate("text", x = first_significant_sample_sizeYF, y = max(p_valuesYF$avg_p_value), label = paste("N =", first_significant_sample_sizeYF, "per group"), hjust = -0.1) +
  theme_minimal() +
  labs(x = "Sample Size", y = "Average P-Value",
       title = "(D) - younger Adult Fast Breathing")
       #subtitle = "Red line indicates p = 0.05, Blue line indicates the first point where p < 0.05") 

YF_Power_Plot
rm(p_valuesYF)

```

## (RT) Power Analysis - olderER ADULTS PRE/POST SLOW

```{r}

library(faux)
library(sjPlot)
library(sjmisc)
library(sjlabelled)
library(effectsize)


data_prepost_slow_young <- summaryDF_wide %>% 
  dplyr::filter(group=="younger")

df_final_simYS <- data_prepost_slow_young %>%dplyr::select(participant, post_slow_avg_rt, pre_slow_avg_rt)

p_valuesYS <- tibble()


for (n in seq(10, 100, by = 1)) {
  
  # Empty vector to store p-values for each simulation
  simulation_p_valuesYS <- c()
  
  # Loop for 1000 simulations
  for (i in 1:1000) {
    
    # Simulate data
    sim_dataYS <- sim_df(df_final_simYS, n) 
    
    # Perform t-test and get p-value
    testYS <- t.test(sim_dataYS$pre_slow_avg_rt,  sim_dataYS$post_slow_avg_rt, paired = TRUE, alternative = "two.sided") ## for condition addition
    p_valYS <- testYS$p.value
    
    # Add p-value to the vector
    simulation_p_valuesYS <- c(simulation_p_valuesYS, p_valYS)
  }
  
  # Calculate average p-value
  avg_p_valYS <- mean(simulation_p_valuesYS, na.rm = TRUE)
  
  # Save results to data frame
  p_valuesYS <- bind_rows(p_valuesYS, tibble(sample_size = n, avg_p_value = avg_p_valYS))
}


# View the data frame with p-values
print(p_valuesYS)

# Get the sample size where avg_p_value < 0.05 for the first time
first_significant_sample_sizeYS <- p_valuesYS$sample_size[min(which(p_valuesYS$avg_p_value < 0.05))]


# Create the plot
YS_Power_Plot <- ggplot(p_valuesYS, aes(x = sample_size, y = avg_p_value)) +
  geom_line() +
  geom_hline(yintercept = 0.05, linetype = "dashed", color = "lightblue") +
  geom_vline(xintercept = first_significant_sample_sizeYS, linetype = "dashed", color = "pink") +
  annotate("text", x = first_significant_sample_sizeYS, y = max(p_valuesYS$avg_p_value), label = paste("N =", first_significant_sample_sizeYS, "per group"), hjust = -0.1) +
  theme_minimal() +
  labs(x = "Sample Size", y = "Average P-Value",
       title = "(B) - olderer Adult Slow Breathing")
       #subtitle = "Red line indicates p = 0.05, Blue line indicates the first point where p < 0.05") 

YS_Power_Plot
rm(p_valuesYS)

```

#  {style="color: gray"}
